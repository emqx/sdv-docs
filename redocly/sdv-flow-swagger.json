{
  "openapi": "3.1.0",
  "info": {
    "title": "SDV Flow API",
    "description": "",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "SDV-Flow-API"
    },
    {
      "name": "Message bus"
    },
    {
      "name": "Data processing"
    },
    {
      "name": "configKey"
    },
    {
      "name": "configs"
    },
    {
      "name": "data"
    },
    {
      "name": "overview"
    },
    {
      "name": "plugins"
    },
    {
      "name": "rules"
    },
    {
      "name": "ruleset"
    },
    {
      "name": "schemas"
    },
    {
      "name": "services"
    },
    {
      "name": "streams"
    },
    {
      "name": "tables"
    },
    {
      "name": "uploads"
    },
    {
      "name": "data processing metrics"
    },
    {
      "name": "test rule"
    },
    {
      "name": "udf"
    }
  ],
  "paths": {
    "/api/nanomq/": {
      "get": {
        "summary": "Query API Endpoints",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "返回 NanoMQ 支持的所有 Endpoints 。",
        "tags": [
          "Message bus"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "string",
                            "description": "Endpoint"
                          },
                          "name": {
                            "type": "string",
                            "description": "Endpoint 名"
                          },
                          "method": {
                            "type": "string",
                            "description": "HTTP Method"
                          },
                          "descr": {
                            "type": "string",
                            "description": "描述"
                          }
                        },
                        "required": [
                          "path",
                          "name",
                          "method",
                          "descr"
                        ],
                        "x-apifox-orders": [
                          "path",
                          "name",
                          "method",
                          "descr"
                        ],
                        "x-apifox-ignore-properties": []
                      },
                      "description": "Endpoints 列表"
                    }
                  },
                  "required": [
                    "code",
                    "data"
                  ],
                  "x-apifox-orders": [
                    "code",
                    "data"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0,
                      "data": [
                        {
                          "path": "/brokers/",
                          "name": "list_brokers",
                          "method": "GET",
                          "descr": "A list of brokers in the cluster"
                        },
                        {
                          "path": "/nodes/",
                          "name": "list_nodes",
                          "method": "GET",
                          "descr": "A list of nodes in the cluster"
                        },
                        {
                          "path": "/clients/",
                          "name": "list_clients",
                          "method": "GET",
                          "descr": "A list of clients on current node"
                        },
                        {
                          "path": "/clients/:clientid",
                          "name": "lookup_client",
                          "method": "GET",
                          "descr": "Lookup a client in the cluster"
                        },
                        {
                          "path": "/clients/username/:username",
                          "name": "lookup_client_via_username",
                          "method": "GET",
                          "descr": "Lookup a client via username in the cluster"
                        },
                        {
                          "path": "/subscriptions/",
                          "name": "list_subscriptions",
                          "method": "GET",
                          "descr": "A list of subscriptions in the cluster"
                        },
                        {
                          "path": "/subscriptions/:clientid",
                          "name": "lookup_client_subscriptions",
                          "method": "GET",
                          "descr": "A list of subscriptions of a client"
                        },
                        {
                          "path": "/topic-tree/",
                          "name": "list_topic-tree",
                          "method": "GET",
                          "descr": "A list of topic-tree in the cluster"
                        },
                        {
                          "path": "/configuration/",
                          "name": "get_broker_configuration",
                          "method": "GET",
                          "descr": "show broker configuration"
                        },
                        {
                          "path": "/configuration/",
                          "name": "set_broker_configuration",
                          "method": "POST",
                          "descr": "set broker configuration"
                        },
                        {
                          "path": "/ctrl/:action",
                          "name": "ctrl_broker",
                          "method": "POST",
                          "descr": "Control broker stop or restart"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194711506-run"
      }
    },
    "/api/nanomq/brokers": {
      "get": {
        "summary": "Query Broker ",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "返回 Broker 的基本信息。",
        "tags": [
          "Message bus"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "datetime": {
                            "type": "string",
                            "description": "当前时间，格式为 \"YYYY-MM-DD HH:mm:ss\""
                          },
                          "node_status": {
                            "type": "string",
                            "description": "节点状态"
                          },
                          "sysdescr": {
                            "type": "string",
                            "description": "软件描述"
                          },
                          "uptime": {
                            "type": "string",
                            "description": "NanoMQ 运行时间，格式为 \"H hours, m minutes, s seconds\""
                          },
                          "version": {
                            "type": "string",
                            "description": "NanoMQ 版本"
                          }
                        },
                        "x-apifox-orders": [
                          "datetime",
                          "node_status",
                          "sysdescr",
                          "uptime",
                          "version"
                        ],
                        "x-apifox-ignore-properties": []
                      },
                      "description": "返回所有节点的信息*(只有一个节点， nanomq 暂不支持集群)*"
                    }
                  },
                  "required": [
                    "code",
                    "data"
                  ],
                  "x-apifox-orders": [
                    "code",
                    "data"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0,
                      "data": [
                        {
                          "datetime": "2022-06-07 10:02:24",
                          "node_status": "Running",
                          "sysdescr": "NanoMQ Broker",
                          "uptime": "15 Hours, 1 minutes, 38 seconds",
                          "version": "0.7.9-3"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194720569-run"
      }
    },
    "/api/nanomq/nodes": {
      "get": {
        "summary": "Query nodes",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "返回节点的状态。",
        "tags": [
          "Message bus"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "connections": {
                            "type": "integer",
                            "description": "当前接入此节点的客户端数量"
                          },
                          "node_status": {
                            "type": "string",
                            "description": "节点状态"
                          },
                          "uptime": {
                            "type": "string",
                            "description": "NanoMQ 运行时间"
                          },
                          "version": {
                            "type": "string",
                            "description": "NanoMQ 版本"
                          }
                        },
                        "x-apifox-orders": [
                          "connections",
                          "node_status",
                          "uptime",
                          "version"
                        ],
                        "x-apifox-ignore-properties": []
                      },
                      "description": "以 Array 形式返回所有节点的信息*(只有一个节点， nanomq 暂不支持集群)*"
                    }
                  },
                  "required": [
                    "code",
                    "data"
                  ],
                  "x-apifox-orders": [
                    "code",
                    "data"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0,
                      "data": [
                        {
                          "connections": 0,
                          "node_status": "Running",
                          "uptime": "15 Hours, 22 minutes, 4 seconds",
                          "version": "0.8.1"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194721800-run"
      }
    },
    "/api/nanomq/metrics": {
      "get": {
        "summary": "Query metrics",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "返回 NanoMQ 的统计信息。",
        "tags": [
          "Message bus"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metrics": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "暂未支持，（空）"
                    },
                    "cpuinfo": {
                      "type": "string",
                      "description": "NanoMQ CPU 使用量"
                    },
                    "memory": {
                      "type": "string",
                      "description": "NanoMQ 内存使用量"
                    }
                  },
                  "required": [
                    "metrics",
                    "cpuinfo",
                    "memory"
                  ],
                  "x-apifox-orders": [
                    "metrics",
                    "cpuinfo",
                    "memory"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "metrics": [],
                      "cpuinfo": "0.00%",
                      "memory": "20049920"
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194722792-run"
      }
    },
    "/api/nanomq/prometheus": {
      "get": {
        "summary": "Query prometheus statistics",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "返回 Prometheus 统计数据。",
        "tags": [
          "Message bus"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apifox-orders": [],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": "# TYPE nanomq_connections_count gauge\n# HELP nanomq_connections_count\nnanomq_connections_count 0\n# TYPE nanomq_connections_max gauge\n# HELP nanomq_connections_max\nnanomq_connections_max 0\n# TYPE nanomq_sessions_count gauge\n# HELP nanomq_sessions_count\nnanomq_sessions_count 0\n# TYPE nanomq_sessions_max gauge\n# HELP nanomq_sessions_max\nnanomq_sessions_max 0\n# TYPE nanomq_topics_count gauge\n# HELP nanomq_topics_count\nnanomq_topics_count 0\n# TYPE nanomq_topics_max gauge\n# HELP nanomq_topics_max\nnanomq_topics_max 0\n# TYPE nanomq_subscribers_count gauge\n# HELP nanomq_subscribers_count\nnanomq_subscribers_count 0\n# TYPE nanomq_subscribers_max gauge\n# HELP nanomq_subscribers_max\nnanomq_subscribers_max 0\n# TYPE nanomq_messages_received counter\n# HELP nanomq_messages_received\nnanomq_messages_received 0\n# TYPE nanomq_messages_sent counter\n# HELP nanomq_messages_sent\nnanomq_messages_sent 0\n# TYPE nanomq_messages_dropped counter\n# HELP nanomq_messages_dropped\nnanomq_messages_dropped 0\n# TYPE nanomq_memory_usage gauge\n# HELP nanomq_memory_usage (b)\nnanomq_memory_usage 19922944\n# TYPE nanomq_memory_usage_max gauge\n# HELP nanomq_memory_usage_max (b)\nnanomq_memory_usage_max 19922944\n# TYPE nanomq_cpu_usage gauge\n# HELP nanomq_cpu_usage (%)\nnanomq_cpu_usage 0.00\n# TYPE nanomq_cpu_usage_max gauge\n# HELP nanomq_cpu_usage_max (%)\nnanomq_cpu_usage_max 0.00"
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194726749-run"
      }
    },
    "/api/nanomq/clients": {
      "get": {
        "summary": "Query clients",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "多条件查询客户端",
        "tags": [
          "Message bus"
        ],
        "parameters": [
          {
            "name": "clientid",
            "in": "query",
            "description": "客户端标识符",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "客户端用户名",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conn_state",
            "in": "query",
            "description": "客户端当前连接状态， 可取值有： connected",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clean_start",
            "in": "query",
            "description": "客户端是否使用了全新的会话",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proto_name",
            "in": "query",
            "description": "客户端协议名称， 可取值有： MQTT",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "proto_ver",
            "in": "query",
            "description": "客户端协议版本",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "client_id": {
                            "type": "string",
                            "description": "客户端标识符"
                          },
                          "username": {
                            "type": "string",
                            "description": "客户端连接时使用的用户名"
                          },
                          "keepalive": {
                            "type": "integer",
                            "description": "客户端协议名称 (MQTT,CoAP,LwM2M,MQTT-SN)"
                          },
                          "conn_state": {
                            "type": "string",
                            "description": "客户端使用的协议版本"
                          },
                          "clean_start": {
                            "type": "boolean",
                            "description": "客户端是否处于连接状态"
                          },
                          "proto_name": {
                            "type": "string",
                            "description": "保持连接时间，单位：秒"
                          },
                          "proto_ver": {
                            "type": "integer",
                            "description": "指示客户端是否使用了全新的会话"
                          },
                          "recv_msg": {
                            "type": "integer",
                            "description": "接收的 PUBLISH 报文数量"
                          }
                        },
                        "required": [
                          "client_id",
                          "username",
                          "keepalive",
                          "conn_state",
                          "clean_start",
                          "proto_name",
                          "proto_ver",
                          "recv_msg"
                        ],
                        "x-apifox-orders": [
                          "client_id",
                          "username",
                          "keepalive",
                          "conn_state",
                          "clean_start",
                          "proto_name",
                          "proto_ver",
                          "recv_msg"
                        ],
                        "x-apifox-ignore-properties": []
                      },
                      "description": "所有客户端的信息"
                    }
                  },
                  "required": [
                    "code",
                    "data"
                  ],
                  "x-apifox-orders": [
                    "code",
                    "data"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0,
                      "data": [
                        {
                          "client_id": "nanomq-f6d6fbfb",
                          "username": "alvin",
                          "keepalive": 60,
                          "conn_state": "connected",
                          "clean_start": true,
                          "proto_name": "MQTT",
                          "proto_ver": 5,
                          "recv_msg": 3
                        },
                        {
                          "client_id": "nanomq-bdf61d9b",
                          "username": "nanomq",
                          "keepalive": 60,
                          "conn_state": "connected",
                          "clean_start": true,
                          "proto_name": "MQTT",
                          "proto_ver": 5,
                          "recv_msg": 0
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194732117-run"
      }
    },
    "/api/nanomq/clients/{clientid}": {
      "get": {
        "summary": "Query a client",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "返回指定客户端的信息\n",
        "tags": [
          "Message bus"
        ],
        "parameters": [
          {
            "name": "clientid",
            "in": "path",
            "description": "",
            "required": true,
            "example": "ClientID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "client_id": {
                            "type": "string"
                          },
                          "username": {
                            "type": "string"
                          },
                          "keepalive": {
                            "type": "integer"
                          },
                          "conn_state": {
                            "type": "string"
                          },
                          "clean_start": {
                            "type": "boolean"
                          },
                          "proto_name": {
                            "type": "string"
                          },
                          "proto_ver": {
                            "type": "integer"
                          }
                        },
                        "x-apifox-orders": [
                          "client_id",
                          "username",
                          "keepalive",
                          "conn_state",
                          "clean_start",
                          "proto_name",
                          "proto_ver"
                        ],
                        "x-apifox-ignore-properties": []
                      },
                      "description": "客户端的信息，详细请参见 [GET /api/nanomq/clients](#GET /api/nanomq/clients)"
                    }
                  },
                  "required": [
                    "code",
                    "data"
                  ],
                  "x-apifox-orders": [
                    "code",
                    "data"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0,
                      "data": [
                        {
                          "client_id": "nanomq-29978ec1",
                          "username": "",
                          "keepalive": 60,
                          "conn_state": "connected",
                          "clean_start": true,
                          "proto_name": "MQTT",
                          "proto_ver": 5
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194733495-run"
      }
    },
    "/api/nanomq/clients/username/{username}": {
      "get": {
        "summary": "Query client by username",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "通过 Username 查询客户端的信息。由于可能存在多个客户端使用相同的用户名的情况，所以可能同时返回多个客户端信息。",
        "tags": [
          "Message bus"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "Username",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "client_id": {
                            "type": "string"
                          },
                          "username": {
                            "type": "string"
                          },
                          "keepalive": {
                            "type": "integer"
                          },
                          "conn_state": {
                            "type": "string"
                          },
                          "clean_start": {
                            "type": "boolean"
                          },
                          "proto_name": {
                            "type": "string"
                          },
                          "proto_ver": {
                            "type": "integer"
                          }
                        },
                        "x-apifox-orders": [
                          "client_id",
                          "username",
                          "keepalive",
                          "conn_state",
                          "clean_start",
                          "proto_name",
                          "proto_ver"
                        ],
                        "x-apifox-ignore-properties": []
                      },
                      "description": "客户端的信息，详细请参见 [GET /api/nanomq/clients](#GET /api/nanomq/clients)"
                    }
                  },
                  "required": [
                    "code",
                    "data"
                  ],
                  "x-apifox-orders": [
                    "code",
                    "data"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0,
                      "data": [
                        {
                          "client_id": "nanomq-56baa74d",
                          "username": "user001",
                          "keepalive": 60,
                          "conn_state": "connected",
                          "clean_start": true,
                          "proto_name": "MQTT",
                          "proto_ver": 5
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194735335-run"
      }
    },
    "/api/nanomq/subscriptions": {
      "get": {
        "summary": "Query subscriptions",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "多条件查询订阅信息",
        "tags": [
          "Message bus"
        ],
        "parameters": [
          {
            "name": "clientid",
            "in": "query",
            "description": "客户端标识符",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topic",
            "in": "query",
            "description": "主题，全等查询",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qos",
            "in": "query",
            "description": "可取值为：0",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "share",
            "in": "query",
            "description": "共享订阅的组名称",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "clientid": {
                            "type": "string",
                            "description": "客户端标识符"
                          },
                          "topic": {
                            "type": "string",
                            "description": "订阅主题"
                          },
                          "qos": {
                            "type": "integer",
                            "description": "QoS 等级"
                          }
                        },
                        "required": [
                          "clientid",
                          "topic",
                          "qos"
                        ],
                        "x-apifox-orders": [
                          "clientid",
                          "topic",
                          "qos"
                        ],
                        "x-apifox-ignore-properties": []
                      },
                      "description": "所有订阅信息"
                    }
                  },
                  "required": [
                    "code",
                    "data"
                  ],
                  "x-apifox-orders": [
                    "code",
                    "data"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0,
                      "data": [
                        {
                          "clientid": "nanomq-29978ec1",
                          "topic": "topic123",
                          "qos": 2
                        },
                        {
                          "clientid": "nanomq-3020ffac",
                          "topic": "topic123",
                          "qos": 2
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194748146-run"
      }
    },
    "/api/nanomq/subscriptions/{clientid}": {
      "get": {
        "summary": "Query a subscription",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "返回指定客户端的订阅信息。",
        "tags": [
          "Message bus"
        ],
        "parameters": [
          {
            "name": "clientid",
            "in": "path",
            "description": "ClientID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "topic": {
                            "type": "string",
                            "description": "订阅主题"
                          },
                          "qos": {
                            "type": "integer",
                            "description": "QoS 等级"
                          },
                          "clientid": {
                            "type": "string",
                            "description": "客户端标识符"
                          }
                        },
                        "x-apifox-orders": [
                          "topic",
                          "qos",
                          "clientid"
                        ],
                        "x-apifox-ignore-properties": []
                      },
                      "description": "所有订阅信息"
                    },
                    "code": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "data",
                    "code"
                  ],
                  "x-apifox-orders": [
                    "data",
                    "code"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "data": [
                        {
                          "topic": "a/b/c",
                          "qos": 1,
                          "clientid": "123"
                        }
                      ],
                      "code": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194750773-run"
      }
    },
    "/api/nanomq/mqtt/publish": {
      "post": {
        "summary": "Publish msg",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "发布 MQTT 消息。",
        "tags": [
          "Message bus"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "topic": {
                    "type": "string",
                    "description": "主题，与 topics 至少指定其中之一"
                  },
                  "payload": {
                    "type": "string",
                    "description": "消息正文"
                  },
                  "qos": {
                    "type": "integer",
                    "description": "QoS 等级"
                  },
                  "retain": {
                    "type": "boolean",
                    "description": "是否为保留消息"
                  },
                  "clientid": {
                    "type": "string",
                    "description": "客户端标识符"
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "user_properties": {
                        "type": "object",
                        "properties": {},
                        "x-apifox-orders": [],
                        "x-apifox-ignore-properties": []
                      },
                      "response_topic": {
                        "type": "string",
                        "description": "响应主题标识符， UTF-8 编码的字符串，用作响应消息的主题名，响应主题不能包含通配符，包含多个响应主题将造成协议错误(Protocol Error)。响应主题的存在将消息标识为请求报文。服务端在收到应用消息时必须将响应主题原封不动的发送给所有的订阅者。"
                      },
                      "payload_format_indicator\t": {
                        "type": "integer",
                        "description": "载荷格式指示标识符， 0 说明载荷是未指定格式的字节，相当于没有发送载荷格式指示，说明载荷是 UTF-8 编码的字符数据。载荷中的 UTF-8 数据必须是按照 Unicode 的规范和 RFC 3629 的重申进行编码"
                      },
                      "message_expiry_interval\t": {
                        "type": "integer",
                        "description": "消息过期间隔标识符，以秒为单位，如果已过期，服务端还没有开始向匹配的订阅者交付该消息时，则服务端必须删除该订阅者的消息副本，不设置，则消息不会过期。"
                      },
                      "correlation_data": {
                        "type": "string",
                        "description": "对比数据标识符，服务端在收到应用消息时必须原封不动的把对比数据发送给所有的订阅者。对比数据只对请求消息(Request Message)的发送端和响应消息(Response Message)的接收端有意义。"
                      },
                      "subscription_identifier\t": {
                        "type": "string",
                        "description": "订阅标识符标识符，订阅标识符取值范围从 1 到 268,435,455 。订阅标识符的值为 0 将造成协议错误。如果某条发布消息匹配了多个订阅，则将包含多个订阅标识符。这种情况下他们的顺序并不重要。"
                      },
                      "content_type": {
                        "type": "string",
                        "description": "内容类型标识符，以 UTF-8 格式编码的字符串，用来描述应用消息的内容，服务端必须把收到的应用消息中的内容类型原封不动的发送给所有的订阅者"
                      },
                      "user_properties\t": {
                        "type": "string",
                        "description": "用户属性(User Property)允许出现多次，以表示多个名字/值对，服务端在转发应用消息到客户端时必须原封不动的把所有的用户属性放在 PUBLISH 报文中"
                      }
                    },
                    "required": [
                      "user_properties",
                      "response_topic",
                      "correlation_data",
                      "subscription_identifier\t",
                      "content_type",
                      "user_properties\t"
                    ],
                    "x-apifox-orders": [
                      "user_properties",
                      "response_topic",
                      "payload_format_indicator\t",
                      "message_expiry_interval\t",
                      "correlation_data",
                      "subscription_identifier\t",
                      "content_type",
                      "user_properties\t"
                    ],
                    "description": "PUBLISH 消息里的 Property 字段",
                    "x-apifox-ignore-properties": []
                  }
                },
                "required": [
                  "clientid",
                  "properties",
                  "payload"
                ],
                "x-apifox-orders": [
                  "topic",
                  "payload",
                  "qos",
                  "retain",
                  "clientid",
                  "properties"
                ],
                "x-apifox-ignore-properties": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "code"
                  ],
                  "x-apifox-orders": [
                    "code"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194758005-run"
      }
    },
    "/api/nanomq/mqtt/subscribe": {
      "post": {
        "summary": "Subscribe MQTT topic",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "订阅 MQTT 主题。（暂不支持）",
        "tags": [
          "Message bus"
        ],
        "parameters": [
          {
            "name": "topic",
            "in": "query",
            "description": "主题，与 topics 至少指定其中之一",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "topics",
            "in": "query",
            "description": "以 ",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientid",
            "in": "query",
            "description": "客户端标识符",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qos",
            "in": "query",
            "description": "QoS 等级",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "code"
                  ],
                  "x-apifox-orders": [
                    "code"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194759955-run"
      }
    },
    "/api/nanomq/mqtt/unsubscribe": {
      "post": {
        "summary": "Unsubscribe MQTT topic ",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "取消订阅。（暂不支持）",
        "tags": [
          "Message bus"
        ],
        "parameters": [
          {
            "name": "topic",
            "in": "query",
            "description": "主题",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientid",
            "in": "query",
            "description": "客户端标识符",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "code"
                  ],
                  "x-apifox-orders": [
                    "code"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194760018-run"
      }
    },
    "/api/nanomq/mqtt/publish_batch": {
      "post": {
        "summary": "Batch publish msg",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "批量发布 MQTT 消息。",
        "tags": [
          "Message bus"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "topic": {
                      "type": "string",
                      "description": "主题，与 topics 至少指定其中之一"
                    },
                    "topics": {
                      "type": "string",
                      "description": "以 , 分割的多个主题，使用此字段能够同时发布消息到多个主题"
                    },
                    "payload": {
                      "type": "string",
                      "description": "消息正文"
                    },
                    "qos": {
                      "type": "integer",
                      "description": "QoS 等级"
                    },
                    "retain": {
                      "type": "boolean",
                      "description": "是否为保留消息"
                    },
                    "clientid": {
                      "type": "string",
                      "description": "客户端标识符"
                    },
                    "encoding": {
                      "type": "string",
                      "description": "消息正文使用的编码方式，目前仅支持 plain 与 base64 两种"
                    },
                    "properties": {
                      "type": "object",
                      "properties": {
                        "user_properties": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "foo": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "id",
                            "name",
                            "foo"
                          ],
                          "x-apifox-orders": [
                            "id",
                            "name",
                            "foo"
                          ],
                          "x-apifox-ignore-properties": []
                        },
                        "content_type": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "user_properties",
                        "content_type"
                      ],
                      "x-apifox-orders": [
                        "user_properties",
                        "content_type"
                      ],
                      "description": "PUBLISH 消息里的 properties 字段",
                      "x-apifox-ignore-properties": []
                    }
                  },
                  "required": [
                    "payload",
                    "clientid"
                  ],
                  "x-apifox-orders": [
                    "topic",
                    "topics",
                    "payload",
                    "qos",
                    "retain",
                    "clientid",
                    "encoding",
                    "properties"
                  ],
                  "x-apifox-ignore-properties": []
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "topic": {
                            "type": "string"
                          },
                          "code": {
                            "type": "integer"
                          }
                        },
                        "required": [
                          "topic",
                          "code"
                        ],
                        "x-apifox-orders": [
                          "topic",
                          "code"
                        ],
                        "x-apifox-ignore-properties": []
                      }
                    },
                    "code": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "data",
                    "code"
                  ],
                  "x-apifox-orders": [
                    "data",
                    "code"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "data": [
                        {
                          "topic": "a/b/c",
                          "code": 0
                        },
                        {
                          "topic": "a/b/c",
                          "code": 0
                        }
                      ],
                      "code": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194763898-run"
      }
    },
    "/api/nanomq/mqtt/subscribe_batch": {
      "post": {
        "summary": "Batch subscribe topic",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "批量订阅 MQTT 主题。(暂不支持)",
        "tags": [
          "Message bus"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "topic": {
                      "type": "string",
                      "description": "主题，与 topics 至少指定其中之一"
                    },
                    "qos": {
                      "type": "integer",
                      "description": "QoS 等级"
                    },
                    "clientid": {
                      "type": "string",
                      "description": "客户端标识符"
                    },
                    "topics": {
                      "type": "string",
                      "description": "以 , 分割的多个主题，使用此字段能够同时订阅多个主题"
                    }
                  },
                  "required": [
                    "qos",
                    "clientid"
                  ],
                  "x-apifox-orders": [
                    "topic",
                    "qos",
                    "clientid",
                    "topics"
                  ],
                  "x-apifox-ignore-properties": []
                }
              },
              "example": [
                {
                  "topic": "a",
                  "qos": 1,
                  "clientid": "example"
                },
                {
                  "topic": "b",
                  "qos": 1,
                  "clientid": "example"
                },
                {
                  "topic": "c",
                  "qos": 1,
                  "clientid": "example"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "code"
                  ],
                  "x-apifox-orders": [
                    "code"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194809883-run"
      }
    },
    "/api/nanomq/mqtt/unsubscribe_batch": {
      "post": {
        "summary": "Batch unsubscribe topic",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "批量取消订阅。(暂不支持)",
        "tags": [
          "Message bus"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "topic": {
                      "type": "string",
                      "description": "主题，与 topics 至少指定其中之一"
                    },
                    "clientid": {
                      "type": "string",
                      "description": "客户端标识符"
                    }
                  },
                  "required": [
                    "clientid"
                  ],
                  "x-apifox-orders": [
                    "topic",
                    "clientid"
                  ],
                  "x-apifox-ignore-properties": []
                }
              },
              "example": [
                {
                  "topic": "a",
                  "qos": 1,
                  "clientid": "example"
                },
                {
                  "topic": "b",
                  "qos": 1,
                  "clientid": "example"
                },
                {
                  "topic": "c",
                  "qos": 1,
                  "clientid": "example"
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "code"
                  ],
                  "x-apifox-orders": [
                    "code"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194810184-run"
      }
    },
    "/api/nanomq/topic-tree": {
      "get": {
        "summary": "Get topic-tree",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "",
        "tags": [
          "Message bus"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "topic": {
                              "type": "string",
                              "description": "订阅主题"
                            },
                            "cld_cnt": {
                              "type": "integer",
                              "description": "子节点个数"
                            },
                            "clientid": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "description": "客户端标识符数组"
                            }
                          },
                          "x-apifox-orders": [
                            "topic",
                            "cld_cnt",
                            "clientid"
                          ],
                          "x-apifox-ignore-properties": []
                        }
                      },
                      "description": "所有订阅信息"
                    }
                  },
                  "required": [
                    "code",
                    "data"
                  ],
                  "x-apifox-orders": [
                    "code",
                    "data"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0,
                      "data": [
                        [
                          {
                            "topic": "",
                            "cld_cnt": 1
                          }
                        ],
                        [
                          {
                            "topic": "topic123",
                            "cld_cnt": 1,
                            "clientid": [
                              "nanomq-3a4a0956"
                            ]
                          }
                        ],
                        [
                          {
                            "topic": "123",
                            "cld_cnt": 1,
                            "clientid": [
                              "nanomq-0cfd69bb"
                            ]
                          }
                        ],
                        [
                          {
                            "topic": "456",
                            "cld_cnt": 0,
                            "clientid": [
                              "nanomq-26971dc8"
                            ]
                          }
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194851720-run"
      }
    },
    "/api/nanomq/reload": {
      "get": {
        "summary": "Get reload configuration.",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "返回当前所有支持热更新的配置参数。",
        "tags": [
          "Message bus"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "property_size": {
                          "type": "integer",
                          "description": "最大属性长度。"
                        },
                        "max_packet_size": {
                          "type": "integer",
                          "description": "NanoMQ 的最大包大小 (Kbytes)"
                        },
                        "client_max_packet_size": {
                          "type": "integer",
                          "description": "每个 client 的 最大包大小"
                        },
                        "msq_len": {
                          "type": "integer",
                          "description": "队列长度。"
                        },
                        "qos_duration": {
                          "type": "integer",
                          "description": "QOS 消息定时间隔时间。"
                        },
                        "keepalive_backoff": {
                          "type": "integer",
                          "description": "MQTT keepalive 的退避指数"
                        },
                        "allow_anonymous": {
                          "type": "boolean",
                          "description": "允许匿名登录。"
                        }
                      },
                      "required": [
                        "property_size",
                        "max_packet_size",
                        "client_max_packet_size",
                        "msq_len",
                        "qos_duration",
                        "keepalive_backoff",
                        "allow_anonymous"
                      ],
                      "x-apifox-orders": [
                        "property_size",
                        "max_packet_size",
                        "client_max_packet_size",
                        "msq_len",
                        "qos_duration",
                        "keepalive_backoff",
                        "allow_anonymous"
                      ],
                      "x-apifox-ignore-properties": []
                    }
                  },
                  "required": [
                    "code",
                    "data"
                  ],
                  "x-apifox-orders": [
                    "code",
                    "data"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0,
                      "data": {
                        "property_size": 64,
                        "max_packet_size": 3,
                        "client_max_packet_size": 5,
                        "msq_len": 2048,
                        "qos_duration": 10,
                        "keepalive_backoff": 1250,
                        "allow_anonymous": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194861294-run"
      },
      "post": {
        "summary": "Set reload configuration.",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "设置热配置参数。",
        "tags": [
          "Message bus"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "property_size": {
                        "type": "integer"
                      },
                      "max_packet_size": {
                        "type": "integer"
                      },
                      "client_max_packet_size": {
                        "type": "integer"
                      },
                      "msq_len": {
                        "type": "integer"
                      },
                      "qos_duration": {
                        "type": "integer"
                      },
                      "keepalive_backoff": {
                        "type": "integer"
                      },
                      "allow_anonymous": {
                        "type": "boolean"
                      }
                    },
                    "required": [
                      "property_size",
                      "max_packet_size",
                      "client_max_packet_size",
                      "msq_len",
                      "qos_duration",
                      "keepalive_backoff",
                      "allow_anonymous"
                    ],
                    "x-apifox-orders": [
                      "property_size",
                      "max_packet_size",
                      "client_max_packet_size",
                      "msq_len",
                      "qos_duration",
                      "keepalive_backoff",
                      "allow_anonymous"
                    ],
                    "x-apifox-ignore-properties": []
                  }
                },
                "required": [
                  "data",
                  "01J2ZY8N1VAJ2SNB1B5KHRSR9A"
                ],
                "x-apifox-orders": [
                  "01J2ZY8N1VAJ2SNB1B5KHRSR9A",
                  "data"
                ],
                "x-apifox-ignore-properties": []
              },
              "example": {
                "data": {
                  "property_size": 64,
                  "max_packet_size": 3,
                  "client_max_packet_size": 5,
                  "msq_len": 2048,
                  "qos_duration": 10,
                  "keepalive_backoff": 1250,
                  "allow_anonymous": false
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "code"
                  ],
                  "x-apifox-orders": [
                    "code"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194960850-run"
      }
    },
    "/api/nanomq/config_update": {
      "get": {
        "summary": "Update configuration.",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "配置文件更新。",
        "tags": [
          "Message bus"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "query",
            "description": "",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {},
                "x-apifox-orders": [],
                "description": "传输的数据内容是新的配置，配置内容可参考 配置（https://nanomq.io/docs/zh/latest/config-description/introduction.html）。",
                "x-apifox-ignore-properties": []
              },
              "example": "# NanoMQ Configuration 0.18.0\n \n # #============================================================\n # # NanoMQ Broker\n # #============================================================\n \n mqtt {\n     property_size = 32\n     max_packet_size = 10KB\n     max_mqueue_len = 2048\n     retry_interval = 10s\n     keepalive_multiplier = 1.25\n \n     # Three of below, unsupported now\n     max_inflight_window = 2048\n     max_awaiting_rel = 10s\n     await_rel_timeout = 10s\n }\n \n listeners.tcp {\n     bind = \"0.0.0.0:1883\"\n }\n \n # listeners.ssl {\n # \tbind = \"0.0.0.0:8883\"\n # \tkeyfile = \"/etc/certs/key.pem\"\n # \tcertfile = \"/etc/certs/cert.pem\"\n # \tcacertfile = \"/etc/certs/cacert.pem\"\n # \tverify_peer = false\n # \tfail_if_no_peer_cert = false\n # }\n \n listeners.ws {\n     bind = \"0.0.0.0:8083/mqtt\"\n }\n \n http_server {\n     port = 8081\n     limit_conn = 2\n     username = admin\n     password = public\n     auth_type = basic\n     jwt {\n         public.keyfile = \"/etc/certs/jwt/jwtRS256.key.pub\"\n     }\n }\n \n log {\n     to = [file, console]\n     level = info\n     dir = \"/tmp\"\n     file = \"nanomq.log\"\n     rotation {\n         size = 10MB\n         count = 5\n     }\n }\n \n auth {\n     allow_anonymous = true\n     no_match = allow\n     deny_action = ignore\n \n     cache = {\n         max_size = 32\n         ttl = 1m\n     }\n \n     # password = {include \"/etc/nanomq_pwd.conf\"}\n     # acl = {include \"/etc/nanomq_acl.conf\"}\n }"
            }
          }
        },
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apifox-ignore-properties": [],
                  "x-apifox-orders": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194885113-run"
      }
    },
    "/api/nanomq/bridges": {
      "get": {
        "summary": "Get bridges configuration",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "获取所有桥接节点配置",
        "tags": [
          "Message bus"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "bridge": {
                          "type": "object",
                          "properties": {
                            "nodes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "节点名字。"
                                  },
                                  "enable": {
                                    "type": "boolean",
                                    "description": "启动桥接功能（默认false不启用）。"
                                  },
                                  "parallel": {
                                    "type": "integer"
                                  },
                                  "connector": {
                                    "type": "object",
                                    "properties": {
                                      "server": {
                                        "type": "string",
                                        "description": "桥接目标 broker 地址 URL 。"
                                      },
                                      "proto_ver": {
                                        "type": "integer",
                                        "description": "桥接客户端 MQTT 版本（ 4 ｜ 5 ）。"
                                      },
                                      "clientid": {
                                        "type": "null",
                                        "description": "桥接客户端 ID （默认 NULL 为自动生成随机 ID）。"
                                      },
                                      "clean_start": {
                                        "type": "boolean",
                                        "description": "清除会话。"
                                      },
                                      "username": {
                                        "type": "string",
                                        "description": "登录用户名。"
                                      },
                                      "password": {
                                        "type": "string",
                                        "description": "登录密码。"
                                      },
                                      "keepalive": {
                                        "type": "integer",
                                        "description": "保活间隔时间。"
                                      },
                                      "conn_properties": {
                                        "type": "object",
                                        "properties": {
                                          "session_expiry_interval": {
                                            "type": "integer"
                                          },
                                          "receive_maximum": {
                                            "type": "integer"
                                          },
                                          "maximum_packet_size": {
                                            "type": "integer"
                                          },
                                          "topic_alias_maximum": {
                                            "type": "integer"
                                          },
                                          "request_response_information": {
                                            "type": "boolean"
                                          },
                                          "request_problem_information": {
                                            "type": "boolean"
                                          }
                                        },
                                        "required": [
                                          "session_expiry_interval",
                                          "receive_maximum",
                                          "maximum_packet_size",
                                          "topic_alias_maximum",
                                          "request_response_information",
                                          "request_problem_information"
                                        ],
                                        "x-apifox-orders": [
                                          "session_expiry_interval",
                                          "receive_maximum",
                                          "maximum_packet_size",
                                          "topic_alias_maximum",
                                          "request_response_information",
                                          "request_problem_information"
                                        ],
                                        "description": "Connector 的 MQTT V5 属性",
                                        "x-apifox-ignore-properties": []
                                      },
                                      "will_properties": {
                                        "type": "object",
                                        "properties": {
                                          "payload_format_indicator": {
                                            "type": "integer"
                                          },
                                          "message_expiry_interval": {
                                            "type": "integer"
                                          },
                                          "will_delay_interval": {
                                            "type": "integer"
                                          },
                                          "user_properties": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "key": {
                                                  "type": "string"
                                                },
                                                "value": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "key",
                                                "value"
                                              ],
                                              "x-apifox-orders": [
                                                "key",
                                                "value"
                                              ],
                                              "x-apifox-ignore-properties": []
                                            }
                                          }
                                        },
                                        "required": [
                                          "payload_format_indicator",
                                          "message_expiry_interval",
                                          "will_delay_interval",
                                          "user_properties"
                                        ],
                                        "x-apifox-orders": [
                                          "payload_format_indicator",
                                          "message_expiry_interval",
                                          "will_delay_interval",
                                          "user_properties"
                                        ],
                                        "description": "MQTT V5 遗嘱属性",
                                        "x-apifox-ignore-properties": []
                                      },
                                      "ssl": {
                                        "type": "object",
                                        "properties": {
                                          "enable": {
                                            "type": "boolean",
                                            "description": "启动 TLS 监听（默认false）。"
                                          },
                                          "key_password": {
                                            "type": "string",
                                            "description": "TLS 私钥密码。"
                                          },
                                          "keyfile": {
                                            "type": "string",
                                            "description": "TLS 私钥数据。"
                                          },
                                          "certfile": {
                                            "type": "string",
                                            "description": "TLS Cert 证书数据。"
                                          },
                                          "cacertfile": {
                                            "type": "string",
                                            "description": "TLS CA 证书数据。"
                                          }
                                        },
                                        "x-apifox-orders": [
                                          "enable",
                                          "key_password",
                                          "keyfile",
                                          "certfile",
                                          "cacertfile"
                                        ],
                                        "required": [
                                          "enable",
                                          "key_password",
                                          "keyfile",
                                          "certfile",
                                          "cacertfile"
                                        ],
                                        "x-apifox-ignore-properties": []
                                      }
                                    },
                                    "required": [
                                      "server",
                                      "proto_ver",
                                      "clientid",
                                      "clean_start",
                                      "username",
                                      "password",
                                      "keepalive",
                                      "conn_properties",
                                      "will_properties",
                                      "ssl"
                                    ],
                                    "x-apifox-orders": [
                                      "server",
                                      "proto_ver",
                                      "clientid",
                                      "clean_start",
                                      "username",
                                      "password",
                                      "keepalive",
                                      "conn_properties",
                                      "will_properties",
                                      "ssl"
                                    ],
                                    "x-apifox-ignore-properties": []
                                  },
                                  "forwards": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "remote_topic": {
                                          "type": "string",
                                          "description": "第一个转发的remote_topic"
                                        },
                                        "local_topic": {
                                          "type": "string",
                                          "description": "第一个转发的local_topic"
                                        }
                                      },
                                      "required": [
                                        "remote_topic",
                                        "local_topic"
                                      ],
                                      "x-apifox-orders": [
                                        "remote_topic",
                                        "local_topic"
                                      ],
                                      "x-apifox-ignore-properties": []
                                    }
                                  },
                                  "subscription": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "remote_topic": {
                                          "type": "string",
                                          "description": "第 1 个订阅remote_topic。"
                                        },
                                        "local_topic": {
                                          "type": "string",
                                          "description": "第 1 个订阅local_topic。"
                                        },
                                        "qos": {
                                          "type": "integer",
                                          "description": "第 1 个订阅Qos。"
                                        }
                                      },
                                      "required": [
                                        "remote_topic",
                                        "local_topic",
                                        "qos"
                                      ],
                                      "x-apifox-orders": [
                                        "remote_topic",
                                        "local_topic",
                                        "qos"
                                      ],
                                      "x-apifox-ignore-properties": []
                                    }
                                  },
                                  "sub_properties": {
                                    "type": "object",
                                    "properties": {
                                      "identifier": {
                                        "type": "integer"
                                      },
                                      "user_properties": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "key": {
                                              "type": "string"
                                            },
                                            "value": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "key",
                                            "value"
                                          ],
                                          "x-apifox-orders": [
                                            "key",
                                            "value"
                                          ],
                                          "x-apifox-ignore-properties": []
                                        }
                                      }
                                    },
                                    "required": [
                                      "identifier",
                                      "user_properties"
                                    ],
                                    "x-apifox-orders": [
                                      "identifier",
                                      "user_properties"
                                    ],
                                    "x-apifox-ignore-properties": []
                                  },
                                  "tls": {
                                    "type": "object",
                                    "properties": {
                                      "enable": {
                                        "type": "boolean"
                                      },
                                      "url": {
                                        "type": "null"
                                      },
                                      "key_password": {
                                        "type": "null"
                                      },
                                      "key": {
                                        "type": "null"
                                      },
                                      "cert": {
                                        "type": "null"
                                      },
                                      "cacert": {
                                        "type": "null"
                                      },
                                      "verify_peer": {
                                        "type": "boolean"
                                      },
                                      "fail_if_no_peer_cert": {
                                        "type": "boolean"
                                      }
                                    },
                                    "required": [
                                      "enable",
                                      "url",
                                      "key_password",
                                      "key",
                                      "cert",
                                      "cacert",
                                      "verify_peer",
                                      "fail_if_no_peer_cert"
                                    ],
                                    "x-apifox-orders": [
                                      "enable",
                                      "url",
                                      "key_password",
                                      "key",
                                      "cert",
                                      "cacert",
                                      "verify_peer",
                                      "fail_if_no_peer_cert"
                                    ],
                                    "x-apifox-ignore-properties": []
                                  }
                                },
                                "x-apifox-orders": [
                                  "name",
                                  "enable",
                                  "parallel",
                                  "connector",
                                  "forwards",
                                  "subscription",
                                  "sub_properties",
                                  "tls"
                                ],
                                "x-apifox-ignore-properties": []
                              }
                            },
                            "max_recv_queue_len": {
                              "type": "integer",
                              "description": "最大接收队列长度"
                            },
                            "max_send_queue_len": {
                              "type": "integer",
                              "description": "最大发送队列长度"
                            },
                            "sub_properties": {
                              "type": "object",
                              "properties": {},
                              "x-apifox-orders": [],
                              "description": "Subscription 的 MQTT V5 属性",
                              "x-apifox-ignore-properties": []
                            },
                            "quic_qos_priority": {
                              "type": "boolean",
                              "description": "高优先级发送 QOS 1 或 2 的消息(默认 true)"
                            },
                            "quic_0rtt": {
                              "type": "boolean",
                              "description": "0RTT 是 QUIC 协议的一个特性，用于快速重新建立连接 (默认 true)"
                            },
                            "quic_multi_stream": {
                              "type": "boolean",
                              "description": "Quic Multiple stream 开关（默认false不启用）"
                            },
                            "parallel": {
                              "type": "integer",
                              "description": "桥接客户端并发数。"
                            },
                            "quic_keepalive": {
                              "type": "string",
                              "description": "Quic 传输层保活时间, （默认 120s )"
                            },
                            "quic_idle_timeout": {
                              "type": "string",
                              "description": "Quic 连接最大过期时间 （默认 120s )"
                            },
                            "quic_discon_timeout": {
                              "type": "string",
                              "description": "Quic 等待连接 ACK 最大时间 （默认 20s )"
                            },
                            "quic_handshake_timeout": {
                              "type": "string",
                              "description": "QUIC 握手最大超时时间（默认 60s )"
                            },
                            "quic_send_idle_timeout": {
                              "type": "string",
                              "description": "QUIC 传输层重置拥塞控制算法的等待超时时间 (默认60 s)"
                            },
                            "quic_initial_rtt_ms": {
                              "type": "string",
                              "description": "初始 RTT 估计时间 (默认 800ms)"
                            },
                            "quic_max_ack_delay_ms": {
                              "type": "string",
                              "description": "发送 ACK 之前接收数据后等待时长(默认100ms)"
                            },
                            "hybrid_bridging": {
                              "type": "boolean",
                              "description": "混合桥接模式开关，(默认 false 不启用), 如果想最大利用 QUIC ，建议启用"
                            }
                          },
                          "required": [
                            "nodes",
                            "hybrid_bridging",
                            "quic_max_ack_delay_ms",
                            "quic_initial_rtt_ms",
                            "quic_send_idle_timeout",
                            "quic_handshake_timeout",
                            "quic_discon_timeout",
                            "quic_idle_timeout",
                            "quic_keepalive",
                            "parallel",
                            "quic_multi_stream",
                            "quic_0rtt",
                            "quic_qos_priority",
                            "sub_properties",
                            "max_send_queue_len",
                            "max_recv_queue_len"
                          ],
                          "x-apifox-orders": [
                            "nodes",
                            "max_recv_queue_len",
                            "max_send_queue_len",
                            "sub_properties",
                            "quic_qos_priority",
                            "quic_0rtt",
                            "quic_multi_stream",
                            "parallel",
                            "quic_keepalive",
                            "quic_idle_timeout",
                            "quic_discon_timeout",
                            "quic_handshake_timeout",
                            "quic_send_idle_timeout",
                            "quic_initial_rtt_ms",
                            "quic_max_ack_delay_ms",
                            "hybrid_bridging"
                          ],
                          "x-apifox-ignore-properties": []
                        }
                      },
                      "required": [
                        "bridge"
                      ],
                      "x-apifox-orders": [
                        "bridge"
                      ],
                      "description": "所有桥接客户端的配置信息",
                      "x-apifox-ignore-properties": []
                    }
                  },
                  "required": [
                    "code",
                    "data"
                  ],
                  "x-apifox-orders": [
                    "code",
                    "data"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": "{\n    \"code\": 0,\n    \"data\": {\n        \"bridge\": {\n            \"nodes\": [\n                {\n                    \"name\": \"emqx\",\n                    \"enable\": true,\n                    \"parallel\": 2,\n                    \"connector\": {\n                        \"server\": \"mqtt-tcp://broker.emqx.io:1883\",\n                        \"proto_ver\": 5,\n                        \"clientid\": null,\n                        \"clean_start\": true,\n                        \"username\": \"\",\n                        \"password\": \"\",\n                        \"keepalive\": 60,\n                        \"conn_properties\": {\n                            \"session_expiry_interval\": 30,\n                            \"receive_maximum\": 65535,\n                            \"maximum_packet_size\": 0,\n                            \"topic_alias_maximum\": 0,\n                            \"request_response_information\": false,\n                            \"request_problem_information\": true\n                        },\n                        \"will_properties\": {\n                            \"payload_format_indicator\": 0,\n                            \"message_expiry_interval\": 360,\n                            \"will_delay_interval\": 20,\n                            \"user_properties\": [\n                                {\n                                    \"key\": \"key1\",\n                                    \"value\": \"value1\"\n                                },\n                                {\n                                    \"key\": \"key2\",\n                                    \"value\": \"value2\"\n                                }\n                            ]\n                        }\n                    },\n                    \"forwards\": [\n                        {\n                            \"remote_topic\": \"fwd/topic1\",\n                            \"local_topic\": \"topic1\",\n                        },\n                        {\n                            \"remote_topic\": \"fwd/topic2\",\n                            \"local_topic\": \"topic2\",\n                        }\n                    ],\n                    \"subscription\": [\n                        {\n                            \"remote_topic\": \"cmd/topic1\",\n                            \"local_topic\": \"topic1\",\n                            \"qos\": 1\n                        },\n                        {\n                            \"remote_topic\": \"cmd/topic2\",\n                            \"local_topic\": \"topic2\",\n                            \"qos\": 2\n                        }\n                    ],\n                    \"sub_properties\": {\n                        \"identifier\": 1,\n                        \"user_properties\": [\n                            {\n                                \"key\": \"key1\",\n                                \"value\": \"value1\"\n                            },\n                            {\n                                \"key\": \"key2\",\n                                \"value\": \"value2\"\n                            }\n                        ]\n                    },\n                    \"tls\": {\n                        \"enable\": false,\n                        \"url\": null,\n                        \"key_password\": null,\n                        \"key\": null,\n                        \"cert\": null,\n                        \"cacert\": null,\n                        \"verify_peer\": false,\n                        \"fail_if_no_peer_cert\": false\n                    }\n                }\n            ]\n        }\n    }\n}"
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194905379-run"
      }
    },
    "/api/nanomq/bridges/{bridge_name}": {
      "get": {
        "summary": "Get bridges by name",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "通过桥接节点名称获取桥接配置",
        "tags": [
          "Message bus"
        ],
        "parameters": [
          {
            "name": "bridge_name",
            "in": "path",
            "description": "bridge node name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "bridge": {
                          "type": "object",
                          "properties": {
                            "nodes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "enable": {
                                    "type": "boolean"
                                  },
                                  "parallel": {
                                    "type": "integer"
                                  },
                                  "connector": {
                                    "type": "object",
                                    "properties": {
                                      "server": {
                                        "type": "string"
                                      },
                                      "proto_ver": {
                                        "type": "integer"
                                      },
                                      "clientid": {
                                        "type": "null"
                                      },
                                      "clean_start": {
                                        "type": "boolean"
                                      },
                                      "username": {
                                        "type": "string"
                                      },
                                      "password": {
                                        "type": "string"
                                      },
                                      "keepalive": {
                                        "type": "integer"
                                      },
                                      "conn_properties": {
                                        "type": "object",
                                        "properties": {
                                          "session_expiry_interval": {
                                            "type": "integer"
                                          },
                                          "receive_maximum": {
                                            "type": "integer"
                                          },
                                          "maximum_packet_size": {
                                            "type": "integer"
                                          },
                                          "topic_alias_maximum": {
                                            "type": "integer"
                                          },
                                          "request_response_information": {
                                            "type": "boolean"
                                          },
                                          "request_problem_information": {
                                            "type": "boolean"
                                          }
                                        },
                                        "required": [
                                          "session_expiry_interval",
                                          "receive_maximum",
                                          "maximum_packet_size",
                                          "topic_alias_maximum",
                                          "request_response_information",
                                          "request_problem_information"
                                        ],
                                        "x-apifox-orders": [
                                          "session_expiry_interval",
                                          "receive_maximum",
                                          "maximum_packet_size",
                                          "topic_alias_maximum",
                                          "request_response_information",
                                          "request_problem_information"
                                        ],
                                        "x-apifox-ignore-properties": []
                                      },
                                      "will_properties": {
                                        "type": "object",
                                        "properties": {
                                          "payload_format_indicator": {
                                            "type": "integer"
                                          },
                                          "message_expiry_interval": {
                                            "type": "integer"
                                          },
                                          "will_delay_interval": {
                                            "type": "integer"
                                          },
                                          "user_properties": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "key": {
                                                  "type": "string"
                                                },
                                                "value": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "key",
                                                "value"
                                              ],
                                              "x-apifox-orders": [
                                                "key",
                                                "value"
                                              ],
                                              "x-apifox-ignore-properties": []
                                            }
                                          }
                                        },
                                        "required": [
                                          "payload_format_indicator",
                                          "message_expiry_interval",
                                          "will_delay_interval",
                                          "user_properties"
                                        ],
                                        "x-apifox-orders": [
                                          "payload_format_indicator",
                                          "message_expiry_interval",
                                          "will_delay_interval",
                                          "user_properties"
                                        ],
                                        "x-apifox-ignore-properties": []
                                      }
                                    },
                                    "required": [
                                      "server",
                                      "proto_ver",
                                      "clientid",
                                      "clean_start",
                                      "username",
                                      "password",
                                      "keepalive",
                                      "conn_properties",
                                      "will_properties"
                                    ],
                                    "x-apifox-orders": [
                                      "server",
                                      "proto_ver",
                                      "clientid",
                                      "clean_start",
                                      "username",
                                      "password",
                                      "keepalive",
                                      "conn_properties",
                                      "will_properties"
                                    ],
                                    "x-apifox-ignore-properties": []
                                  },
                                  "forwards": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "remote_topic": {
                                          "type": "string"
                                        },
                                        "local_topic": {
                                          "type": "string"
                                        },
                                        "qos": {
                                          "type": "integer"
                                        }
                                      },
                                      "required": [
                                        "remote_topic",
                                        "local_topic",
                                        "qos"
                                      ],
                                      "x-apifox-orders": [
                                        "remote_topic",
                                        "local_topic",
                                        "qos"
                                      ],
                                      "x-apifox-ignore-properties": []
                                    }
                                  },
                                  "subscription": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "remote_topic": {
                                          "type": "string"
                                        },
                                        "local_topic": {
                                          "type": "string"
                                        },
                                        "qos": {
                                          "type": "integer"
                                        }
                                      },
                                      "required": [
                                        "remote_topic",
                                        "local_topic",
                                        "qos"
                                      ],
                                      "x-apifox-orders": [
                                        "remote_topic",
                                        "local_topic",
                                        "qos"
                                      ],
                                      "x-apifox-ignore-properties": []
                                    }
                                  },
                                  "sub_properties": {
                                    "type": "object",
                                    "properties": {
                                      "identifier": {
                                        "type": "integer"
                                      },
                                      "user_properties": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "key": {
                                              "type": "string"
                                            },
                                            "value": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "key",
                                            "value"
                                          ],
                                          "x-apifox-orders": [
                                            "key",
                                            "value"
                                          ],
                                          "x-apifox-ignore-properties": []
                                        }
                                      }
                                    },
                                    "required": [
                                      "identifier",
                                      "user_properties"
                                    ],
                                    "x-apifox-orders": [
                                      "identifier",
                                      "user_properties"
                                    ],
                                    "x-apifox-ignore-properties": []
                                  },
                                  "tls": {
                                    "type": "object",
                                    "properties": {
                                      "enable": {
                                        "type": "boolean"
                                      },
                                      "url": {
                                        "type": "null"
                                      },
                                      "key_password": {
                                        "type": "null"
                                      },
                                      "key": {
                                        "type": "null"
                                      },
                                      "cert": {
                                        "type": "null"
                                      },
                                      "cacert": {
                                        "type": "null"
                                      },
                                      "verify_peer": {
                                        "type": "boolean"
                                      },
                                      "fail_if_no_peer_cert": {
                                        "type": "boolean"
                                      }
                                    },
                                    "required": [
                                      "enable",
                                      "url",
                                      "key_password",
                                      "key",
                                      "cert",
                                      "cacert",
                                      "verify_peer",
                                      "fail_if_no_peer_cert"
                                    ],
                                    "x-apifox-orders": [
                                      "enable",
                                      "url",
                                      "key_password",
                                      "key",
                                      "cert",
                                      "cacert",
                                      "verify_peer",
                                      "fail_if_no_peer_cert"
                                    ],
                                    "x-apifox-ignore-properties": []
                                  }
                                },
                                "x-apifox-orders": [
                                  "name",
                                  "enable",
                                  "parallel",
                                  "connector",
                                  "forwards",
                                  "subscription",
                                  "sub_properties",
                                  "tls"
                                ],
                                "x-apifox-ignore-properties": []
                              }
                            }
                          },
                          "required": [
                            "nodes"
                          ],
                          "x-apifox-orders": [
                            "nodes"
                          ],
                          "x-apifox-ignore-properties": []
                        }
                      },
                      "required": [
                        "bridge"
                      ],
                      "x-apifox-orders": [
                        "bridge"
                      ],
                      "description": "桥接配置信息，详细请参见 [GET /api/nanomq/bridges](#GET /api/nanomq/bridges/)",
                      "x-apifox-ignore-properties": []
                    }
                  },
                  "required": [
                    "code",
                    "data"
                  ],
                  "x-apifox-orders": [
                    "code",
                    "data"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0,
                      "data": {
                        "bridge": {
                          "nodes": [
                            {
                              "name": "emqx",
                              "enable": true,
                              "parallel": 2,
                              "connector": {
                                "server": "mqtt-tcp://broker.emqx.io:1883",
                                "proto_ver": 5,
                                "clientid": null,
                                "clean_start": true,
                                "username": "",
                                "password": "",
                                "keepalive": 60,
                                "conn_properties": {
                                  "session_expiry_interval": 30,
                                  "receive_maximum": 65535,
                                  "maximum_packet_size": 0,
                                  "topic_alias_maximum": 0,
                                  "request_response_information": false,
                                  "request_problem_information": true
                                },
                                "will_properties": {
                                  "payload_format_indicator": 0,
                                  "message_expiry_interval": 360,
                                  "will_delay_interval": 20,
                                  "user_properties": [
                                    {
                                      "key": "key1",
                                      "value": "value1"
                                    },
                                    {
                                      "key": "key2",
                                      "value": "value2"
                                    }
                                  ]
                                }
                              },
                              "forwards": [
                                {
                                  "remote_topic": "fwd/topic1",
                                  "local_topic": "topic1",
                                  "qos": 1
                                },
                                {
                                  "remote_topic": "fwd/topic2",
                                  "local_topic": "topic2",
                                  "qos": 2
                                }
                              ],
                              "subscription": [
                                {
                                  "remote_topic": "cmd/topic1",
                                  "local_topic": "topic1",
                                  "qos": 1
                                },
                                {
                                  "remote_topic": "cmd/topic2",
                                  "local_topic": "topic2",
                                  "qos": 2
                                }
                              ],
                              "sub_properties": {
                                "identifier": 1,
                                "user_properties": [
                                  {
                                    "key": "key1",
                                    "value": "value1"
                                  },
                                  {
                                    "key": "key2",
                                    "value": "value2"
                                  }
                                ]
                              },
                              "tls": {
                                "enable": false,
                                "url": null,
                                "key_password": null,
                                "key": null,
                                "cert": null,
                                "cacert": null,
                                "verify_peer": false,
                                "fail_if_no_peer_cert": false
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194907200-run"
      },
      "put": {
        "summary": "Update bridges configuration",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "更新桥接配置并触发桥接连接重连以立即生效。无需重启 NanoMQ，Reload API 会触发桥接重连，修改桥接订阅主题不会重连。",
        "tags": [
          "Message bus"
        ],
        "parameters": [
          {
            "name": "bridge_name",
            "in": "path",
            "description": "桥接节点名称",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "bridge_name": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "enable": {
                        "type": "boolean"
                      },
                      "parallel": {
                        "type": "integer"
                      },
                      "server": {
                        "type": "string"
                      },
                      "proto_ver": {
                        "type": "integer"
                      },
                      "clientid": {
                        "type": "string"
                      },
                      "clean_start": {
                        "type": "boolean"
                      },
                      "username": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      },
                      "keepalive": {
                        "type": "integer"
                      },
                      "forwards": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "remote_topic": {
                              "type": "string"
                            },
                            "local_topic": {
                              "type": "string"
                            },
                            "qos": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "remote_topic",
                            "local_topic",
                            "qos"
                          ],
                          "x-apifox-orders": [
                            "remote_topic",
                            "local_topic",
                            "qos"
                          ],
                          "x-apifox-ignore-properties": []
                        }
                      },
                      "subscription": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "remote_topic": {
                              "type": "string"
                            },
                            "local_topic": {
                              "type": "string"
                            },
                            "qos": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "remote_topic",
                            "local_topic",
                            "qos"
                          ],
                          "x-apifox-orders": [
                            "remote_topic",
                            "local_topic",
                            "qos"
                          ],
                          "x-apifox-ignore-properties": []
                        }
                      }
                    },
                    "required": [
                      "name",
                      "enable",
                      "parallel",
                      "server",
                      "proto_ver",
                      "clientid",
                      "clean_start",
                      "username",
                      "password",
                      "keepalive",
                      "forwards",
                      "subscription"
                    ],
                    "x-apifox-orders": [
                      "name",
                      "enable",
                      "parallel",
                      "server",
                      "proto_ver",
                      "clientid",
                      "clean_start",
                      "username",
                      "password",
                      "keepalive",
                      "forwards",
                      "subscription"
                    ],
                    "description": "桥接客户端节点名称",
                    "x-apifox-ignore-properties": []
                  }
                },
                "required": [
                  "bridge_name"
                ],
                "x-apifox-orders": [
                  "bridge_name"
                ],
                "x-apifox-ignore-properties": []
              },
              "example": {
                "emqx": {
                  "name": "emqx",
                  "enable": true,
                  "parallel": 8,
                  "server": "mqtt-tcp://broker.emqx.io:1883",
                  "proto_ver": 4,
                  "clientid": "hello3",
                  "clean_start": true,
                  "username": "emqx",
                  "password": "emqx123",
                  "keepalive": 60,
                  "forwards": [
                    {
                      "remote_topic": "fwd/topic1",
                      "local_topic": "local/topic1",
                      "qos": 1
                    },
                    {
                      "remote_topic": "fwd/topic3",
                      "local_topic": "local/topic3",
                      "qos": 2
                    }
                  ],
                  "subscription": [
                    {
                      "remote_topic": "cmd/topic1",
                      "local_topic": "local/topic1",
                      "qos": 1
                    },
                    {
                      "remote_topic": "cmd/topic3",
                      "local_topic": "local/topic3",
                      "qos": 2
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "返回 108 可能是由于以下两种原因之一：  URL 后的 name 参数指定错误。 JSON 内的命名错误。例如，在上述示例中，JSON 中的 \"emqx\" 与 name 中的 \"emqx\" 名称不一致。 返回 109 是由于 JSON 数据不合法。"
                    }
                  },
                  "required": [
                    "code"
                  ],
                  "x-apifox-orders": [
                    "code"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194909678-run"
      }
    },
    "/api/nanomq/bridges/sub/{bridge_name}": {
      "put": {
        "summary": "Add bridges topic",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "动态新增桥接主题并立即生效。",
        "tags": [
          "Message bus"
        ],
        "parameters": [
          {
            "name": "bridge_name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "example": "application/json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "",
            "required": true,
            "example": "Basic YWRtaW46cHVibGlj",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "subscription": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "remote_topic": {
                              "type": "string",
                              "description": "第 1 个订阅remote_topic。\t"
                            },
                            "local_topic": {
                              "type": "string",
                              "description": "第 1 个订阅local_topic。\t"
                            },
                            "qos": {
                              "type": "integer",
                              "description": "第 1 个订阅Qos。\t"
                            }
                          },
                          "required": [
                            "remote_topic",
                            "local_topic",
                            "qos"
                          ],
                          "x-apifox-orders": [
                            "remote_topic",
                            "local_topic",
                            "qos"
                          ],
                          "x-apifox-ignore-properties": []
                        }
                      },
                      "sub_properties": {
                        "type": "object",
                        "properties": {
                          "identifier": {
                            "type": "integer",
                            "description": "Subscription 的 ID\t"
                          },
                          "user_properties": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "key",
                                "value"
                              ],
                              "x-apifox-orders": [
                                "key",
                                "value"
                              ],
                              "x-apifox-ignore-properties": []
                            },
                            "description": "Subscription 的 用户属性\t"
                          }
                        },
                        "required": [
                          "identifier",
                          "user_properties"
                        ],
                        "x-apifox-orders": [
                          "identifier",
                          "user_properties"
                        ],
                        "description": "Subscription 的 MQTT V5 属性\t",
                        "x-apifox-ignore-properties": []
                      }
                    },
                    "required": [
                      "subscription",
                      "sub_properties"
                    ],
                    "x-apifox-orders": [
                      "subscription",
                      "sub_properties"
                    ],
                    "description": "桥接节点配置信息\t",
                    "x-apifox-ignore-properties": []
                  }
                },
                "required": [
                  "data"
                ],
                "x-apifox-orders": [
                  "data"
                ],
                "x-apifox-ignore-properties": []
              },
              "example": {
                "data": {
                  "subscription": [
                    {
                      "remote_topic": "cmd/topic4",
                      "local_topic": "topic4",
                      "qos": 1
                    },
                    {
                      "remote_topic": "cmd/topic5",
                      "local_topic": "topic5",
                      "qos": 2
                    }
                  ],
                  "sub_properties": {
                    "identifier": 1,
                    "user_properties": [
                      {
                        "key": "key1",
                        "value": "value1"
                      },
                      {
                        "key": "key2",
                        "value": "value2"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "code"
                  ],
                  "x-apifox-orders": [
                    "code"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194912769-run"
      }
    },
    "/api/nanomq/ctrl/{action}": {
      "post": {
        "summary": "Control broker",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "控制 broker 停止或重启（通常应用在修改配置后）",
        "tags": [
          "Message bus"
        ],
        "parameters": [
          {
            "name": "action",
            "in": "path",
            "description": "可取值: stop, restart",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "code"
                  ],
                  "x-apifox-orders": [
                    "code"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194919683-run"
      }
    },
    "/api/nanomq/rules/": {
      "get": {
        "summary": "Query rules",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "获取规则列表, 包括规则的 SQL, id 等。",
        "tags": [
          "Message bus"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "过滤条件：规则是否开启状态"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "规则 ID"
                          },
                          "rawsql": {
                            "type": "string",
                            "description": "SQL 语句，与请求中的 rawsql 一致"
                          }
                        },
                        "x-apifox-orders": [
                          "id",
                          "rawsql"
                        ],
                        "required": [
                          "id",
                          "rawsql"
                        ],
                        "x-apifox-ignore-properties": []
                      },
                      "description": "规则详情"
                    }
                  },
                  "x-apifox-orders": [
                    "code",
                    "enabled",
                    "data",
                    "01J2ZVRSRYM4Q1Z87N343VYS00"
                  ],
                  "required": [
                    "code",
                    "enabled",
                    "data",
                    "01J2ZVRSRYM4Q1Z87N343VYS00"
                  ],
                  "x-apifox-ignore-properties": []
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194921759-run"
      }
    },
    "/api/nanomq/rules/{rule_id}": {
      "get": {
        "summary": "Query a rule",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "获取某个规则的详情, 包括规则的 SQL, id 等",
        "tags": [
          "Message bus"
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "description": "可选， Rule ID 。如不指定 rule_id 则以数组形式返回所有已创建的规则。",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "过滤条件：规则是否开启状态"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "规则 ID"
                          },
                          "rawsql": {
                            "type": "string",
                            "description": "SQL 语句，与请求中的 rawsql 一致"
                          }
                        },
                        "x-apifox-orders": [
                          "id",
                          "rawsql"
                        ],
                        "required": [
                          "id",
                          "rawsql"
                        ],
                        "x-apifox-ignore-properties": []
                      },
                      "description": "规则详情"
                    }
                  },
                  "x-apifox-orders": [
                    "code",
                    "enabled",
                    "data",
                    "01J2ZVRSRYM4Q1Z87N343VYS00"
                  ],
                  "required": [
                    "code",
                    "enabled",
                    "data",
                    "01J2ZVRSRYM4Q1Z87N343VYS00"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 15,
                      "enabled": true,
                      "data": [
                        {
                          "id": "47",
                          "rawsql": "select * from demo"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194922540-run"
      },
      "put": {
        "summary": "Update rule.",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "创建规则，返回规则 ID 。",
        "tags": [
          "Message bus"
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rawsql": {
                    "type": "string",
                    "description": "规则的 SQL 语句"
                  },
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "动作名称 (include repub, mysql, sqlite)"
                        },
                        "params": {
                          "type": "string",
                          "description": "动作参数。参数以 key-value 形式表示。详情可参看添加规则的示例"
                        }
                      },
                      "x-apifox-orders": [
                        "name",
                        "params"
                      ],
                      "required": [
                        "name",
                        "params"
                      ],
                      "x-apifox-ignore-properties": []
                    },
                    "description": "动作列表"
                  },
                  "description": {
                    "type": "string",
                    "description": "可选，规则描述"
                  }
                },
                "x-apifox-orders": [
                  "rawsql",
                  "actions",
                  "description"
                ],
                "required": [
                  "rawsql",
                  "actions"
                ],
                "x-apifox-ignore-properties": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "过滤条件：规则是否开启状态"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "规则 ID"
                          },
                          "rawsql": {
                            "type": "string",
                            "description": "SQL 语句，与请求中的 rawsql 一致"
                          }
                        },
                        "x-apifox-orders": [
                          "id",
                          "rawsql"
                        ],
                        "x-apifox-ignore-properties": []
                      },
                      "description": "规则详情"
                    }
                  },
                  "required": [
                    "code",
                    "enabled",
                    "data"
                  ],
                  "x-apifox-orders": [
                    "code",
                    "enabled",
                    "data"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 15,
                      "enabled": true,
                      "data": [
                        {
                          "id": "47",
                          "rawsql": "select * from demo"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194930325-run"
      },
      "delete": {
        "summary": "Delete rule",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "删除规则。",
        "tags": [
          "Message bus"
        ],
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "code"
                  ],
                  "x-apifox-orders": [
                    "code"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194933186-run"
      }
    },
    "/api/nanomq/rules": {
      "post": {
        "summary": "Create rule.",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "创建规则，返回规则 ID 。",
        "tags": [
          "Message bus"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rawsql": {
                    "type": "string",
                    "description": "规则的 SQL 语句"
                  },
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "动作名称 (include repub, mysql, sqlite)"
                        },
                        "params": {
                          "type": "string",
                          "description": "动作参数。参数以 key-value 形式表示。详情可参看添加规则的示例"
                        }
                      },
                      "x-apifox-orders": [
                        "name",
                        "params"
                      ],
                      "required": [
                        "name",
                        "params"
                      ],
                      "x-apifox-ignore-properties": []
                    },
                    "description": "动作列表"
                  },
                  "description": {
                    "type": "string",
                    "description": "可选，规则描述"
                  }
                },
                "x-apifox-orders": [
                  "rawsql",
                  "actions",
                  "description"
                ],
                "required": [
                  "rawsql",
                  "actions"
                ],
                "x-apifox-ignore-properties": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "成功",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "过滤条件：规则是否开启状态"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "规则 ID"
                          },
                          "rawsql": {
                            "type": "string",
                            "description": "SQL 语句，与请求中的 rawsql 一致"
                          }
                        },
                        "x-apifox-orders": [
                          "id",
                          "rawsql"
                        ],
                        "x-apifox-ignore-properties": []
                      },
                      "description": "规则详情"
                    }
                  },
                  "required": [
                    "code",
                    "enabled",
                    "data"
                  ],
                  "x-apifox-orders": [
                    "code",
                    "enabled",
                    "data"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 15,
                      "enabled": true,
                      "data": [
                        {
                          "id": "47",
                          "rawsql": "select * from demo"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194928624-run"
      }
    },
    "/api/nanomq/bridges/unsub/{bridge_name}": {
      "put": {
        "summary": "Delete bridges topic",
        "x-apifox-folder": "sdv-flow/nanomq",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "动态删除桥接订阅主题并立即生效。",
        "tags": [
          "Message bus"
        ],
        "parameters": [
          {
            "name": "bridge_name",
            "in": "path",
            "description": "桥接节点名称",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "",
            "required": true,
            "example": "application/json",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "",
            "required": true,
            "example": "Basic YWRtaW46cHVibGlj",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "properties": {
                      "subscription": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "remote_topic": {
                              "type": "string",
                              "description": "第 1 个订阅remote_topic。\t"
                            },
                            "local_topic": {
                              "type": "string",
                              "description": "第 1 个订阅local_topic。\t"
                            },
                            "qos": {
                              "type": "integer",
                              "description": "第 1 个订阅Qos。\t"
                            }
                          },
                          "required": [
                            "remote_topic",
                            "local_topic",
                            "qos"
                          ],
                          "x-apifox-orders": [
                            "remote_topic",
                            "local_topic",
                            "qos"
                          ],
                          "x-apifox-ignore-properties": []
                        }
                      },
                      "sub_properties": {
                        "type": "object",
                        "properties": {
                          "identifier": {
                            "type": "integer",
                            "description": "Subscription 的 ID\t"
                          },
                          "user_properties": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "key": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "key",
                                "value"
                              ],
                              "x-apifox-orders": [
                                "key",
                                "value"
                              ],
                              "x-apifox-ignore-properties": []
                            },
                            "description": "Subscription 的 用户属性\t"
                          }
                        },
                        "required": [
                          "identifier",
                          "user_properties"
                        ],
                        "x-apifox-orders": [
                          "identifier",
                          "user_properties"
                        ],
                        "description": "Subscription 的 MQTT V5 属性\t",
                        "x-apifox-ignore-properties": []
                      }
                    },
                    "required": [
                      "subscription",
                      "sub_properties"
                    ],
                    "x-apifox-orders": [
                      "subscription",
                      "sub_properties"
                    ],
                    "description": "桥接节点配置信息\t",
                    "x-apifox-ignore-properties": []
                  }
                },
                "required": [
                  "data"
                ],
                "x-apifox-orders": [
                  "data"
                ],
                "x-apifox-ignore-properties": []
              },
              "example": {
                "data": {
                  "subscription": [
                    {
                      "remote_topic": "cmd/topic4",
                      "local_topic": "topic4",
                      "qos": 1
                    },
                    {
                      "remote_topic": "cmd/topic5",
                      "local_topic": "topic5",
                      "qos": 2
                    }
                  ],
                  "sub_properties": {
                    "identifier": 1,
                    "user_properties": [
                      {
                        "key": "key1",
                        "value": "value1"
                      },
                      {
                        "key": "key2",
                        "value": "value2"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "code"
                  ],
                  "x-apifox-orders": [
                    "code"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "成功示例",
                    "value": {
                      "code": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-194973404-run"
      }
    },
    "/api/ekuiper/metadata/sources/yaml/{name}": {
      "get": {
        "summary": "List all configKey",
        "x-apifox-folder": "Ekuiper/configKey",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "This API is used to get all Config Keys under a specific source name.\n\nNote: When retrieving Config Keys, if the properties contain a password field (case-insensitive, such as Password), the API will not return the actual password value, but instead replace it with \"******\" to conceal the password information.",
        "tags": [
          "configKey"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Source name, supports built-in sources and extended sources. The built-in sources include mqtt, redis, neuron, memory, httppull, httppush, file, edgex,\n Extended sources include random, sql, video, zmq and user-defined sources",
            "required": true,
            "example": "mqtt",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "amd_broker": {
                      "type": "object",
                      "properties": {
                        "insecureSkipVerify": {
                          "type": "boolean"
                        },
                        "protocolVersion": {
                          "type": "string"
                        },
                        "qos": {
                          "type": "integer"
                        },
                        "server": {
                          "type": "string"
                        },
                        "password": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "insecureSkipVerify",
                        "protocolVersion",
                        "qos",
                        "server",
                        "password"
                      ],
                      "x-apifox-orders": [
                        "insecureSkipVerify",
                        "protocolVersion",
                        "qos",
                        "server",
                        "password"
                      ]
                    },
                    "default": {
                      "type": "object",
                      "properties": {
                        "qos": {
                          "type": "integer"
                        },
                        "server": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "qos",
                        "server"
                      ],
                      "x-apifox-orders": [
                        "qos",
                        "server"
                      ]
                    },
                    "demo_conf": {
                      "type": "object",
                      "properties": {
                        "qos": {
                          "type": "integer"
                        },
                        "server": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "qos",
                        "server"
                      ],
                      "x-apifox-orders": [
                        "qos",
                        "server"
                      ]
                    }
                  },
                  "required": [
                    "amd_broker",
                    "default",
                    "demo_conf"
                  ],
                  "x-apifox-orders": [
                    "amd_broker",
                    "default",
                    "demo_conf"
                  ],
                  "description": "Note: When retrieving Config Keys, if the properties contain a password field (case-insensitive, such as Password), the API will not return the actual password value, but instead replace it with \"******\" to conceal the password information."
                },
                "examples": {
                  "1": {
                    "summary": "curl  /metadata/sources/yaml/mqtt",
                    "value": {
                      "amd_broker": {
                        "insecureSkipVerify": false,
                        "protocolVersion": "3.1.1",
                        "qos": 1,
                        "server": "tcp://122.9.166.75:1883",
                        "password": "******"
                      },
                      "default": {
                        "qos": 2,
                        "server": "tcp://emqx:1883"
                      },
                      "demo_conf": {
                        "qos": 0,
                        "server": "tcp://10.211.55.6:1883"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-120937670-run"
      }
    },
    "/api/ekuiper/metadata/sources/{name}/confKeys/{confKey}": {
      "delete": {
        "summary": "Delete a configKey",
        "x-apifox-folder": "Ekuiper/configKey",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "This API is used to delete a Config Key configuration under a specific source name",
        "tags": [
          "configKey"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Source name, supports built-in sources and extended sources. The built-in sources include mqtt, redis, neuron, memory, httppull, httppush, file, edgex,\nExtended sources include random, sql, video, zmq and user-defined sources",
            "required": true,
            "example": "mqtt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "confKey",
            "in": "path",
            "description": "Config Key Name。Taking the above as an example, the Config Keys are amd_broker, default, demo_conf in sequence.",
            "required": true,
            "example": "demo_conf",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-120939123-run"
      },
      "put": {
        "summary": "Register a Config Key",
        "x-apifox-folder": "Ekuiper/configKey",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "This API is used to register a Config Key under a specific source name",
        "tags": [
          "configKey"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Source name, supports built-in sources and extended sources. The built-in sources include mqtt, redis, neuron, memory, httppull, httppush, file, edgex, Extended sources include random, sql, video, zmq and user-defined sources",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "confKey",
            "in": "path",
            "description": "Config Key name to register",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "supports built-in sources and extended sources. The built-in sources include mqtt, redis, neuron, memory, httppull, httppush, file, edgex, Extended sources include random, sql, video, zmq and user-defined sources",
                    "title": "Source name"
                  },
                  "confKey": {
                    "type": "string",
                    "title": "Config Key name to register"
                  }
                },
                "x-apifox-orders": [
                  "name",
                  "confKey"
                ],
                "required": [
                  "confKey",
                  "name"
                ]
              },
              "example": ""
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "demo_conf": {
                      "type": "object",
                      "properties": {
                        "qos": {
                          "type": "integer"
                        },
                        "server": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "qos",
                        "server"
                      ],
                      "x-apifox-orders": [
                        "qos",
                        "server"
                      ]
                    }
                  },
                  "required": [
                    "demo_conf"
                  ],
                  "x-apifox-orders": [
                    "demo_conf"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Register the Config Key named demo_conf under the MQTT source",
                    "value": {
                      "demo_conf": {
                        "qos": 0,
                        "server": "tcp://10.211.55.6:1883"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-120941522-run"
      }
    },
    "/api/ekuiper/configs": {
      "patch": {
        "summary": "Reload Basic Configs",
        "x-apifox-folder": "Ekuiper/configs",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "By dynamically reloading configuration, parameters such as debug and timezone can be updated for running eKuiper without restarting the application.\nCurrent supported dynamic reloadable parameters:\n\n- `debug`\n- `consoleLog`\n- `fileLog`\n- `timezone`",
        "tags": [
          "configs"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "debug": {
                    "type": "boolean"
                  },
                  "consoleLog": {
                    "type": "boolean"
                  },
                  "fileLog": {
                    "type": "boolean"
                  },
                  "timezone": {
                    "type": "string"
                  }
                },
                "x-apifox-orders": [
                  "debug",
                  "consoleLog",
                  "fileLog",
                  "timezone"
                ]
              },
              "example": {
                "debug": true,
                "consoleLog": true,
                "fileLog": true,
                "timezone": "UTC"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-120982132-run"
      }
    },
    "/api/ekuiper/stop": {
      "post": {
        "summary": "Shutdown eKuiper",
        "x-apifox-folder": "Ekuiper/configs",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Shut down eKuiper through rest api.",
        "tags": [
          "configs"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3516282/apis/api-133392280-run"
      }
    },
    "/api/ekuiper/data/import": {
      "post": {
        "summary": "Import Data",
        "x-apifox-folder": "Ekuiper/data",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API resets all existing data and then imports the new data into the system by default. But user can specify ``partial=1`` parameter in HTTP URL to keep the existing data and apply the new data.\nThe API supports specifying data by means of text content or file URIs.\n\n\n\nExample 1: Import by text content\n\n```shell\nPOST http://{{host}}/data/import\nContent-Type: application/json\n\n{\n  \"content\": \"{json of the ruleset}\"\n}\n```\n\nExample 2: Import by file URI\n\n```shell\nPOST http://{{host}}/data/import\nContent-Type: application/json\n\n{\n  \"file\": \"file:///tmp/a.json\"\n}\n```\n\nExample 3: Import data via file URI and exit (for plug-ins and static schema updates, users need to ensure that eKuiper can be restarted after exiting)\n\n```shell\nPOST http://{{host}}/data/import?stop=1\nContent-Type: application/json\n\n{\n  \"file\": \"file:///tmp/a.json\"\n}\n```\n\nExample 4: Keep the old data and import new data (overwrite the tables/streams/rules/source config/sink config. install plugins/schema if not exist, else ignore them)\n\n```shell\nPOST http://{{host}}/data/import?partial=1\nContent-Type: application/json\n\n{\n  \"file\": \"file:///tmp/a.json\"\n}\n```\n\n## \n\n## Data Format\n\nThe file format for importing and exporting data is JSON, which can contain : `streams`, `tables`, `rules`, `plugin`, `source yaml` and so on. Each type holds the the key-value pair of the name and the creation statement. In the following example file, we define stream 、rules、table、plugin、source config、sink config\n\n\n```shell \n{\n    \"streams\": {\n        \"demo\": \"CREATE STREAM demo () WITH (DATASOURCE=\\\"users\\\", FORMAT=\\\"JSON\\\")\"\n    },\n    \"tables\": {\n      \"T110\":\"\\n CREATE TABLE T110\\n (\\n S1 string\\n )\\n WITH (DATASOURCE=\\\"test.json\\\", FORMAT=\\\"json\\\", TYPE=\\\"file\\\", KIND=\\\"scan\\\", );\\n \"\n    },\n    \"rules\": {\n        \"rule1\": \"{\\\"id\\\": \\\"rule1\\\",\\\"sql\\\": \\\"SELECT * FROM demo\\\",\\\"actions\\\": [{\\\"log\\\": {}}]}\",\n        \"rule2\": \"{\\\"id\\\": \\\"rule2\\\",\\\"sql\\\": \\\"SELECT * FROM demo\\\",\\\"actions\\\": [{  \\\"log\\\": {}}]}\"\n    },\n    \"nativePlugins\":{\n        \"functions_image\":\"{\\\"name\\\":\\\"image\\\",\\\"file\\\":\\\"https://packages.emqx.net/kuiper-plugins/1.8.1/debian/functions/image_amd64.zip\\\",\\\"shellParas\\\":[]}\",\n        \"sources_video\":\"{\\\"name\\\":\\\"video\\\",\\\"file\\\":\\\"https://packages.emqx.net/kuiper-plugins/1.8.1/debian/sources/video_amd64.zip\\\",\\\"shellParas\\\":[]}\"\n    },\n    \"portablePlugins\":{\n    },\n    \"sourceConfig\":{\n      \"mqtt\":\"{\\\"td\\\":{\\\"insecureSkipVerify\\\":false,\\\"password\\\":\\\"public\\\",\\\"protocolVersion\\\":\\\"3.1.1\\\",\\\"qos\\\":1,\\\"server\\\":\\\"tcp://broker.emqx.io:1883\\\",\\\"username\\\":\\\"admin\\\"},\\\"test\\\":{\\\"insecureSkipVerify\\\":false,\\\"password\\\":\\\"public\\\",\\\"protocolVersion\\\":\\\"3.1.1\\\",\\\"qos\\\":1,\\\"server\\\":\\\"tcp://127.0.0.1:1883\\\",\\\"username\\\":\\\"admin\\\"}}\"\n    },\n    \"sinkConfig\":{\n      \"edgex\":\"{\\\"test\\\":{\\\"bufferLength\\\":1024,\\\"contentType\\\":\\\"application/json\\\",\\\"enableCache\\\":false,\\\"format\\\":\\\"json\\\",\\\"messageType\\\":\\\"event\\\",\\\"omitIfEmpty\\\":false,\\\"port\\\":6379,\\\"protocol\\\":\\\"redis\\\",\\\"sendSingle\\\":true,\\\"server\\\":\\\"localhost\\\",\\\"topic\\\":\\\"application\\\",\\\"type\\\":\\\"redis\\\"}}\"\n    },\n    \"connectionConfig\":{\n    },\n    \"Service\":{\n    },\n    \"Schema\":{\n    },\n    \"uploads\":{\n    }\n}\n```",
        "tags": [
          "data"
        ],
        "parameters": [
          {
            "name": "stop",
            "in": "query",
            "description": "for plug-ins and static schema updates, users need to ensure that eKuiper can be restarted after exiting",
            "required": false,
            "example": "1",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "partial",
            "in": "query",
            "description": "Keep the old data and import new data (overwrite the tables/streams/rules/source config/sink config. install plugins/schema if not exist, else ignore them)",
            "required": false,
            "example": "1",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "title": "text content"
                  },
                  "file": {
                    "type": "string",
                    "title": " file URI"
                  }
                },
                "x-apifox-orders": [
                  "content",
                  "file"
                ]
              },
              "example": {
                "content": "{json of the ruleset}"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ErrorMsg": {
                      "type": "string"
                    },
                    "ConfigResponse": {
                      "type": "object",
                      "properties": {
                        "streams": {
                          "type": "object",
                          "properties": {},
                          "x-apifox-orders": []
                        },
                        "tables": {
                          "type": "object",
                          "properties": {},
                          "x-apifox-orders": []
                        },
                        "rules": {
                          "type": "object",
                          "properties": {},
                          "x-apifox-orders": []
                        },
                        "nativePlugins": {
                          "type": "object",
                          "properties": {},
                          "x-apifox-orders": []
                        },
                        "portablePlugins": {
                          "type": "object",
                          "properties": {},
                          "x-apifox-orders": []
                        },
                        "sourceConfig": {
                          "type": "object",
                          "properties": {},
                          "x-apifox-orders": []
                        },
                        "sinkConfig": {
                          "type": "object",
                          "properties": {},
                          "x-apifox-orders": []
                        },
                        "connectionConfig": {
                          "type": "object",
                          "properties": {},
                          "x-apifox-orders": []
                        },
                        "Service": {
                          "type": "object",
                          "properties": {},
                          "x-apifox-orders": []
                        },
                        "Schema": {
                          "type": "object",
                          "properties": {},
                          "x-apifox-orders": []
                        }
                      },
                      "required": [
                        "streams",
                        "tables",
                        "rules",
                        "nativePlugins",
                        "portablePlugins",
                        "sourceConfig",
                        "sinkConfig",
                        "connectionConfig",
                        "Service",
                        "Schema"
                      ],
                      "x-apifox-orders": [
                        "streams",
                        "tables",
                        "rules",
                        "nativePlugins",
                        "portablePlugins",
                        "sourceConfig",
                        "sinkConfig",
                        "connectionConfig",
                        "Service",
                        "Schema"
                      ]
                    }
                  },
                  "required": [
                    "ErrorMsg",
                    "ConfigResponse"
                  ],
                  "x-apifox-orders": [
                    "ErrorMsg",
                    "ConfigResponse"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "ErrorMsg": "",
                      "ConfigResponse": {
                        "streams": {},
                        "tables": {},
                        "rules": {},
                        "nativePlugins": {},
                        "portablePlugins": {},
                        "sourceConfig": {},
                        "sinkConfig": {},
                        "connectionConfig": {},
                        "Service": {},
                        "Schema": {}
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-120995501-run"
      }
    },
    "/api/ekuiper/data/import/status": {
      "get": {
        "summary": "Import data status",
        "x-apifox-folder": "Ekuiper/data",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "This API returns data import errors. If all returns are empty, it means that the import is completely successful.",
        "tags": [
          "data"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "streams": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "tables": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "rules": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "nativePlugins": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "portablePlugins": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "sourceConfig": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "sinkConfig": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "connectionConfig": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "Service": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "Schema": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "uploads": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    }
                  },
                  "required": [
                    "streams",
                    "tables",
                    "rules",
                    "nativePlugins",
                    "portablePlugins",
                    "sourceConfig",
                    "sinkConfig",
                    "connectionConfig",
                    "Service",
                    "Schema",
                    "uploads"
                  ],
                  "x-apifox-orders": [
                    "streams",
                    "tables",
                    "rules",
                    "nativePlugins",
                    "portablePlugins",
                    "sourceConfig",
                    "sinkConfig",
                    "connectionConfig",
                    "Service",
                    "Schema",
                    "uploads"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "streams": {},
                      "tables": {},
                      "rules": {},
                      "nativePlugins": {},
                      "portablePlugins": {},
                      "sourceConfig": {},
                      "sinkConfig": {},
                      "connectionConfig": {},
                      "Service": {},
                      "Schema": {},
                      "uploads": {}
                    }
                  },
                  "2": {
                    "summary": "Failed to import plugin",
                    "value": {
                      "streams": {},
                      "tables": {},
                      "rules": {},
                      "nativePlugins": {
                        "sinks_tdengine": "fail to download file file:///root/ekuiper-jran/_plugins/ubuntu/sinks/tdengine_amd64.zip: stat /root/ekuiper-jran/_plugins/ubuntu/sinks/tdengine_amd64.zip: no such file or directory",
                        "sources_random": "fail to download file file:///root/ekuiper-jran/_plugins/ubuntu/sources/random_amd64.zip: stat /root/ekuiper-jran/_plugins/ubuntu/sources/random_amd64.zip: no such file or directory"
                      },
                      "portablePlugins": {},
                      "sourceConfig": {},
                      "sinkConfig": {},
                      "connectionConfig": {},
                      "Service": {},
                      "Schema": {},
                      "uploads": {}
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121013522-run"
      }
    },
    "/api/ekuiper/data/export": {
      "get": {
        "summary": "Export all data",
        "x-apifox-folder": "Ekuiper/data",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Export all data,The export API returns a file to download.",
        "tags": [
          "data"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {}
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": "{\n    \"streams\": {},\n    \"tables\": {},\n    \"rules\": {},\n    \"nativePlugins\": {},\n    \"portablePlugins\": {},\n    \"sourceConfig\": {},\n    \"sinkConfig\": {},\n    \"connectionConfig\": {},\n    \"Service\": {},\n    \"Schema\": {}\n}"
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121016081-run"
      },
      "post": {
        "summary": "Export specific rules related data",
        "x-apifox-folder": "Ekuiper/data",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Export specific rules related data,The export API returns a file to download.",
        "tags": [
          "data"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "[\"rule1\",\"rule2\"]": {
                    "type": "string"
                  }
                },
                "required": [
                  "[\"rule1\",\"rule2\"]"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "streams": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "tables": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "rules": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "nativePlugins": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "portablePlugins": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "sourceConfig": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "sinkConfig": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "connectionConfig": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "Service": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    },
                    "Schema": {
                      "type": "object",
                      "properties": {},
                      "x-apifox-orders": []
                    }
                  },
                  "required": [
                    "streams",
                    "tables",
                    "rules",
                    "nativePlugins",
                    "portablePlugins",
                    "sourceConfig",
                    "sinkConfig",
                    "connectionConfig",
                    "Service",
                    "Schema"
                  ],
                  "x-apifox-orders": [
                    "streams",
                    "tables",
                    "rules",
                    "nativePlugins",
                    "portablePlugins",
                    "sourceConfig",
                    "sinkConfig",
                    "connectionConfig",
                    "Service",
                    "Schema"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "streams": {},
                      "tables": {},
                      "rules": {},
                      "nativePlugins": {},
                      "portablePlugins": {},
                      "sourceConfig": {},
                      "sinkConfig": {},
                      "connectionConfig": {},
                      "Service": {},
                      "Schema": {}
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121022926-run"
      }
    },
    "/api/ekuiper/": {
      "get": {
        "summary": "Getting information",
        "x-apifox-folder": "Ekuiper/overview",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "This API is used to get the version number, system type, and program running time.",
        "tags": [
          "overview"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string"
                    },
                    "os": {
                      "type": "string"
                    },
                    "upTimeSeconds": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "version",
                    "os",
                    "upTimeSeconds"
                  ],
                  "x-apifox-orders": [
                    "version",
                    "os",
                    "upTimeSeconds"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "version": "1.0.1-22-g119ee91",
                      "os": "darwin",
                      "upTimeSeconds": 14
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121026189-run"
      }
    },
    "/api/ekuiper/ping": {
      "get": {
        "summary": "ping",
        "x-apifox-folder": "Ekuiper/overview",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "",
        "tags": [
          "overview"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "null"
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121026403-run"
      }
    },
    "/api/ekuiper/plugins/{type}": {
      "post": {
        "summary": "Create a plugin",
        "x-apifox-folder": "Ekuiper/plugins",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API accepts a JSON content to create a new plugin.The plugin is identified by the name. The name must be unique.\n\n### Parameters\n\n1. name: a unique name of the plugin. The name must be the same as the camel case version of the plugin with lowercase first letter. For example, if the exported plugin name is `Random`, then the name of this plugin is `random`.\n2. file: the url of the plugin files. The url can be `http` or `https` scheme or `file` scheme to refer to a local file path of the eKuiper server. It must be a zip file with: a compiled so file and the yaml file(only required for sources). If the plugin depends on some external dependencies, a bash script named install.sh can be provided to do the dependency installation. The name of the files must match the name of the plugin.\n\nA sample zip file for a source named random.zip\n\n1. Random@v1.0.0.so\n2. random.yaml\n3. install.sh\n4. Various dependency files/folders of install.sh\n   - mysdk.zip\n   - myconfig.conf\n5. etc directory: the runtime configuration files or dependency files. After installation, this directory will be\n   renamed to the plugin name under <span v-pre>{{eKuiperPath}}/etc/{{pluginType}}</span> directory.\n\nNotice that, the install.sh will be run that the system may already had the lib or package. Make sure to check the path before. Below is an example install.sh to install a sample sdk lib.\n\n\n```shell #!/bin/sh\ndir=/usr/local/mysdk\ncur=$(dirname \"$0\")\necho \"Base path $cur\"\nif [ -d \"$dir\" ]; then\n    echo \"SDK path $dir exists.\"\nelse\n    echo \"Creating SDK path $dir\"\n    mkdir -p $dir\n    echo \"Created SDK path $dir\"\nfi\n\napt install --no-upgrade unzip\nif [ -d \"$dir/lib\" ]; then\n    echo \"SDK lib path $dir/lib exists.\"\nelse\n    echo \"Unzip SDK lib to path $dir\"\n    unzip $cur/mysdk.zip -d $dir\n    echo \"Unzipped SDK lib to path $dir\"\nfi\n\nif [ -f \"/etc/ld.so.conf.d/myconfig.conf\" ]; then\n    echo \"/etc/ld.so.conf.d/myconfig.conf exists\"\nelse\n    echo \"Copy conf file\"\n    cp $cur/myconfig.conf /etc/ld.so.conf.d/\n    echo \"Copied conf file\"\nfi\nldconfig\necho \"Done\"\n```\n",
        "tags": [
          "plugins"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "value only can be \"sources\", \"sinks\", \"functions\",\"portables\"",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "file": {
                    "type": "string",
                    "description": "- Request Sample when the file locates in a http server\n\n  file:\"http://127.0.0.1/plugins/sources/random.zip\"\n\n- Request Sample for files locates in the same machine of the eKuiper server.\n\n  file:\"file:///var/plugins/sources/random.zip\""
                  }
                },
                "required": [
                  "name",
                  "file"
                ],
                "x-apifox-orders": [
                  "name",
                  "file"
                ]
              },
              "example": {
                "name": "random",
                "file": "http://127.0.0.1/plugins/sources/random.zip"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "file": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "file"
                  ],
                  "x-apifox-orders": [
                    "name",
                    "file"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "name": "random",
                      "file": "file:///var/plugins/sources/random.zip"
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121031556-run"
      },
      "get": {
        "summary": "Show plugins",
        "x-apifox-folder": "Ekuiper/plugins",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for displaying all of plugins defined in the server for a plugin type.",
        "tags": [
          "plugins"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "value only can be \"sources\", \"sinks\", \"functions\",\"portables\"",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": [
                      "plugin1",
                      "plugin2"
                    ]
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121041047-run"
      }
    },
    "/api/ekuiper/plugins/{type}/{name}": {
      "get": {
        "summary": "Describe a sources plugin",
        "x-apifox-folder": "Ekuiper/plugins",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used to print out the detailed definition of a plugin.",
        "tags": [
          "plugins"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "value only can be \"sources\", \"sinks\", \"functions\",\"portables\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "Path parameter `name` is the name of the plugin.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "version"
                  ],
                  "x-apifox-orders": [
                    "name",
                    "version"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "name": "plugin1",
                      "version": "1.0.0"
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121043474-run"
      },
      "delete": {
        "summary": "Drop a plugin",
        "x-apifox-folder": "Ekuiper/plugins",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for drop the plugin. Notice that, for native plugins, the eKuiper server needs to be restarted to take effect. The current rules will continue to run with the deleted native plugins successfully. For portable plugin, the deletion will take effect immediately. The current rules which are using that plugin may encounter errors but won't stop and can continue running if an updated plugin with the same name is created later. If this is not expected, manually stop or delete those rules before deleting a plugin.\n\nThe user can pass a query parameter to decide if eKuiper should be stopped after a delete in order to make the deletion take effect. The parameter is `stop` and only when the value is `1` will the eKuiper be stopped. The user has to manually restart it.",
        "tags": [
          "plugins"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "value only can be \"sources\", \"sinks\", \"functions\",\"portables\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stop",
            "in": "query",
            "description": "",
            "required": false,
            "example": "1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121045298-run"
      },
      "put": {
        "summary": "Update a sources plugin",
        "x-apifox-folder": "Ekuiper/plugins",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Notice that, native plugins can be updated, but the new version will not take effect until the eKuiper server is\nrestarted.\nPortable plugins can be updated, and the new version will take effect immediately even for the running rules.\nThe request body is the same as the create plugin request.",
        "tags": [
          "plugins"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "value only can be \"sources\", \"sinks\", \"functions\",\"portables\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121046737-run"
      }
    },
    "/api/ekuiper/plugins/udfs": {
      "get": {
        "summary": "Show udfs",
        "x-apifox-folder": "Ekuiper/plugins",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for displaying all user defined functions which are defined across all plugins.\n\nUnlike source and sink plugins, function plugin can export multiple functions at once. The exported names must be unique globally across all plugins. There will be a one to many mapping between function and its container plugin. Thus, we provide show udf(user defined function) api to query all user defined functions so that users can check the name duplication. And we provide describe udf api to find out the defined plugin of a function. We also provide the register functions api to register the udf list for an auto loaded plugin.\n",
        "tags": [
          "plugins"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": [
                      "func1",
                      "func2"
                    ]
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121050140-run"
      }
    },
    "/api/ekuiper/plugins/udfs/{name}": {
      "get": {
        "summary": "Describe an udf",
        "x-apifox-folder": "Ekuiper/plugins",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used to find out the plugin which defines the UDF. [APIs to handle function plugin with multiple functions](doc-3173101)",
        "tags": [
          "plugins"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "plugin": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "plugin"
                  ],
                  "x-apifox-orders": [
                    "name",
                    "plugin"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "name": "funcName",
                      "plugin": "pluginName"
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121050249-run"
      }
    },
    "/api/ekuiper/plugins/functions/{plugin_name}/register": {
      "get": {
        "summary": "Register functions",
        "x-apifox-folder": "Ekuiper/plugins",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API aims to register all exported functions in an auto loaded function plugin or when the exported functions are changed. If the plugin was loaded by CLI create command or REST create API with functions property specified, then this is not needed. The register API will persist the functions list in the kv. Unless the exported functions are changed, users only need to register it once.\n[APIs to handle function plugin with multiple functions](doc-3173101)",
        "tags": [
          "plugins"
        ],
        "parameters": [
          {
            "name": "plugin_name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "functions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "functions"
                  ],
                  "x-apifox-orders": [
                    "functions"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "functions": [
                        "func1",
                        "func2"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121050604-run"
      }
    },
    "/api/ekuiper/plugins/{type}/prebuild": {
      "get": {
        "summary": "Get the available plugins",
        "x-apifox-folder": "Ekuiper/plugins",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "According to the configuration `pluginHosts` in file `etc/kuiper.yaml` ,  it returns the plugins list that can be installed at local run eKuiper instance. By default, it get the list from `https://packages.emqx.net` .",
        "tags": [
          "plugins"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "value only can be \"sources\", \"sinks\", \"functions\",\"portables\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "file": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "file"
                ],
                "x-apifox-orders": [
                  "name",
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "file": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "file"
                  ],
                  "x-apifox-orders": [
                    "name",
                    "file"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "file": "http://127.0.0.1:63767/kuiper-plugins/0.9.1/sinks/alpine/file_arm64.zip",
                      "influx": "http://127.0.0.1:63767/kuiper-plugins/0.9.1/sinks/alpine/influx_arm64.zip",
                      "zmq": "http://127.0.0.1:63768/kuiper-plugins/0.9.1/sinks/alpine/zmq_arm64.zip"
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121055109-run"
      }
    },
    "/api/ekuiper/rules": {
      "post": {
        "summary": "Create a rule",
        "x-apifox-folder": "Ekuiper/rules",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API accepts a JSON content and create and start a rule.",
        "tags": [
          "rules"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "sql": {
                    "type": "string"
                  },
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "log": {
                          "type": "object",
                          "properties": {},
                          "x-apifox-orders": []
                        }
                      },
                      "x-apifox-orders": [
                        "log"
                      ]
                    }
                  }
                },
                "required": [
                  "id",
                  "sql",
                  "actions"
                ],
                "x-apifox-orders": [
                  "id",
                  "sql",
                  "actions"
                ]
              },
              "example": {
                "id": "rule1",
                "sql": "SELECT * FROM demo",
                "actions": [
                  {
                    "log": {}
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121060893-run"
      },
      "get": {
        "summary": "Show rules",
        "x-apifox-folder": "Ekuiper/rules",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for displaying all of rules defined in the server with a brief status.",
        "tags": [
          "rules"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "status": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "id",
                      "status"
                    ],
                    "x-apifox-orders": [
                      "id",
                      "status"
                    ]
                  }
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": [
                      {
                        "id": "rule1",
                        "status": "Running"
                      },
                      {
                        "id": "rule2",
                        "status": "Stopped: canceled by error."
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121061337-run"
      }
    },
    "/api/ekuiper/rules/{id}": {
      "get": {
        "summary": "Describe a rule",
        "x-apifox-folder": "Ekuiper/rules",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for print the detailed definition of rule.",
        "tags": [
          "rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id is the id or name of the rule.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sql": {
                      "type": "string"
                    },
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "log": {
                            "type": "object",
                            "properties": {},
                            "x-apifox-orders": []
                          },
                          "mqtt": {
                            "type": "object",
                            "properties": {
                              "server": {
                                "type": "string"
                              },
                              "topic": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "server",
                              "topic"
                            ],
                            "x-apifox-orders": [
                              "server",
                              "topic"
                            ]
                          }
                        },
                        "x-apifox-orders": [
                          "log",
                          "mqtt"
                        ]
                      }
                    }
                  },
                  "required": [
                    "sql",
                    "actions"
                  ],
                  "x-apifox-orders": [
                    "sql",
                    "actions"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "sql": "SELECT * from demo",
                      "actions": [
                        {
                          "log": {}
                        },
                        {
                          "mqtt": {
                            "server": "tcp://127.0.0.1:1883",
                            "topic": "demoSink"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121061827-run"
      },
      "put": {
        "summary": "Update a rule",
        "x-apifox-folder": "Ekuiper/rules",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API accepts a JSON content and update a rule.",
        "tags": [
          "rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id is the id or name of the old rule.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "sql": {
                    "type": "string"
                  },
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "log": {
                          "type": "object",
                          "properties": {},
                          "x-apifox-orders": []
                        }
                      },
                      "x-apifox-orders": [
                        "log"
                      ]
                    }
                  }
                },
                "required": [
                  "id",
                  "sql",
                  "actions"
                ],
                "x-apifox-orders": [
                  "id",
                  "sql",
                  "actions"
                ]
              },
              "example": {
                "id": "rule1",
                "sql": "SELECT * FROM demo",
                "actions": [
                  {
                    "log": {}
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121062446-run"
      },
      "delete": {
        "summary": "Drop a rule",
        "x-apifox-folder": "Ekuiper/rules",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for drop the rule.",
        "tags": [
          "rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121062764-run"
      }
    },
    "/api/ekuiper/rules/{id}/start": {
      "post": {
        "summary": "Start a rule",
        "x-apifox-folder": "Ekuiper/rules",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used to start running the rule.",
        "tags": [
          "rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121064270-run"
      }
    },
    "/api/ekuiper/rules/{id}/stop": {
      "post": {
        "summary": "Stop a rule",
        "x-apifox-folder": "Ekuiper/rules",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used to start running the rule.",
        "tags": [
          "rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121064504-run"
      }
    },
    "/api/ekuiper/rules/{id}/restart": {
      "post": {
        "summary": "Restart a rule",
        "x-apifox-folder": "Ekuiper/rules",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used to start running the rule.",
        "tags": [
          "rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121065173-run"
      }
    },
    "/api/ekuiper/rules/{id}/status": {
      "get": {
        "summary": "Get the status of a rule",
        "x-apifox-folder": "Ekuiper/rules",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The command is used to get the status of the rule. If the rule is running, the metrics will be retrieved realtime. The status can be\n- $metrics\n- stopped: $reason",
        "tags": [
          "rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "source_demo_0_records_in_total": {
                      "type": "integer"
                    },
                    "source_demo_0_records_out_total": {
                      "type": "integer"
                    },
                    "source_demo_0_exceptions_total": {
                      "type": "integer"
                    },
                    "source_demo_0_process_latency_ms": {
                      "type": "integer"
                    },
                    "source_demo_0_buffer_length": {
                      "type": "integer"
                    },
                    "source_demo_0_last_invocation": {
                      "type": "string"
                    },
                    "op_filter_0_records_in_total": {
                      "type": "integer"
                    },
                    "op_filter_0_records_out_total": {
                      "type": "integer"
                    },
                    "op_filter_0_exceptions_total": {
                      "type": "integer"
                    },
                    "op_filter_0_process_latency_ms": {
                      "type": "integer"
                    },
                    "op_filter_0_buffer_length": {
                      "type": "integer"
                    },
                    "op_filter_0_last_invocation": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "source_demo_0_records_in_total",
                    "source_demo_0_records_out_total",
                    "source_demo_0_exceptions_total",
                    "source_demo_0_process_latency_ms",
                    "source_demo_0_buffer_length",
                    "source_demo_0_last_invocation",
                    "op_filter_0_records_in_total",
                    "op_filter_0_records_out_total",
                    "op_filter_0_exceptions_total",
                    "op_filter_0_process_latency_ms",
                    "op_filter_0_buffer_length",
                    "op_filter_0_last_invocation"
                  ],
                  "x-apifox-orders": [
                    "source_demo_0_records_in_total",
                    "source_demo_0_records_out_total",
                    "source_demo_0_exceptions_total",
                    "source_demo_0_process_latency_ms",
                    "source_demo_0_buffer_length",
                    "source_demo_0_last_invocation",
                    "op_filter_0_records_in_total",
                    "op_filter_0_records_out_total",
                    "op_filter_0_exceptions_total",
                    "op_filter_0_process_latency_ms",
                    "op_filter_0_buffer_length",
                    "op_filter_0_last_invocation"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": "{\n    \"source_demo_0_records_in_total\": 5,\n    \"source_demo_0_records_out_total\": 5,\n    \"source_demo_0_exceptions_total\": 0,\n    \"source_demo_0_process_latency_ms\": 0,\n    \"source_demo_0_buffer_length\": 0,\n    \"source_demo_0_last_invocation\": \"2020-01-02T11:28:33.054821\",\n    \"op_filter_0_records_in_total\": 5,\n    \"op_filter_0_records_out_total\": 2,\n    \"op_filter_0_exceptions_total\": 0,\n    \"op_filter_0_process_latency_ms\": 0,\n    \"op_filter_0_buffer_length\": 0,\n    \"op_filter_0_last_invocation\": \"2020-01-02T11:28:33.054821\",\n}"
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121067003-run"
      }
    },
    "/api/ekuiper/rules/{id}/topo": {
      "get": {
        "summary": "Get the topology structure of a rule",
        "x-apifox-folder": "Ekuiper/rules",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The command is used to get the status of the rule represented as a json string. In the json string, there are 2 fields:\n\n- sources: it is a string array of the names of all source nodes. They are the entry of the topology.\n- edges: it is a hash map of all edges categorized by nodes. The keys are the starting point of an edge. And the value is a collection of ending point.",
        "tags": [
          "rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sources": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "edges": {
                      "type": "object",
                      "properties": {
                        "op_project": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "source_stream": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "op_project",
                        "source_stream"
                      ],
                      "x-apifox-orders": [
                        "op_project",
                        "source_stream"
                      ]
                    }
                  },
                  "required": [
                    "sources",
                    "edges"
                  ],
                  "x-apifox-orders": [
                    "sources",
                    "edges"
                  ]
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121067658-run"
      }
    },
    "/api/ekuiper/rules/validate": {
      "post": {
        "summary": "Validate a rule",
        "x-apifox-folder": "Ekuiper/rules",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API accepts a JSON content and validate a rule.\nFor the API, here is the explanation of the status codes:\n\n- If the request body is incorrect, a status code of 400 will be returned, indicating an invalid request.\n- If the rule validation fails, a status code of 422 will be returned, indicating an invalid rule.\n- If the rule validation passes, a status code of 200 will be returned, indicating a valid and successfully validated rule.",
        "tags": [
          "rules"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "sql": {
                    "type": "string"
                  },
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "log": {
                          "type": "object",
                          "properties": {},
                          "x-apifox-orders": []
                        }
                      },
                      "x-apifox-orders": [
                        "log"
                      ]
                    }
                  }
                },
                "required": [
                  "id",
                  "sql",
                  "actions"
                ],
                "x-apifox-orders": [
                  "id",
                  "sql",
                  "actions"
                ]
              },
              "example": {
                "id": "rule1",
                "sql": "SELECT * FROM demo",
                "actions": [
                  {
                    "log": {}
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121067840-run"
      }
    },
    "/api/ekuiper/ruleset/import": {
      "post": {
        "summary": "Import Ruleset",
        "x-apifox-folder": "Ekuiper/ruleset",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API accepts rulesets and imports them into the system. If a stream or rule in the ruleset already exists, it is not created. The API returns text informing the number of streams and rules created. The API supports specifying rulesets by means of text content or file URIs.\n\n## Ruleset Format\n\nThe file format for importing and exporting ruleset is JSON, which can contain three parts: `streams`, `tables` and `rules`. Each type holds the the key-value pair of the name and the creation statement. In the following example file, we define a stream and two rules.\n\n```shell {\n  \"streams\": {\n    \"demo\": \"CREATE STREAM demo () WITH (DATASOURCE=\\\"users\\\", FORMAT=\\\"JSON\\\")\"\n  },\n  \"tables\": {},\n  \"rules\": {\n    \"rule1\": \"{\\\"id\\\": \\\"rule1\\\",\\\"sql\\\": \\\"SELECT * FROM demo\\\",\\\"actions\\\": [{\\\"log\\\": {}}]}\",\n    \"rule2\": \"{\\\"id\\\": \\\"rule2\\\",\\\"sql\\\": \\\"SELECT * FROM demo\\\",\\\"actions\\\": [{  \\\"log\\\": {}}]}\"\n  }\n}\n```",
        "tags": [
          "ruleset"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "title": " Import by file URI"
                  },
                  "content": {
                    "type": "string",
                    "title": " Import by text content"
                  }
                },
                "x-apifox-orders": [
                  "file",
                  "content"
                ]
              },
              "example": {
                "file": "file:///tmp/a.json"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121075911-run"
      }
    },
    "/api/ekuiper/ruleset/export": {
      "post": {
        "summary": "Export Ruleset",
        "x-apifox-folder": "Ekuiper/ruleset",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The export API returns a file to download.",
        "tags": [
          "ruleset"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121076182-run"
      }
    },
    "/api/ekuiper/schemas/protobuf": {
      "post": {
        "summary": "Create a schema",
        "x-apifox-folder": "Ekuiper/schemas",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API accepts a JSON content and create a schema. Each schema type has a standalone endpoint. Currently, only one schema type `protobuf` is supported. Schema is identified by its name, so the name must be unique for each type.\n\nParameters\n1. name：the unique name of the schema.\n2. schema content, use `file` or `content` parameter to specify. After schema created, the schema content will be written into file `data/schemas/$shcema_type/$schema_name`.\n   - file: the url of the schema file. The url can be `http` or `https` scheme or `file` scheme to refer to a local file path of the eKuiper server. The schema file must be the file type of the corresponding schema type. For example, protobuf schema file's extension name must be .proto.\n   - content: the text content of the schema.\n3. soFile：The so file of the static plugin. Detail about the plugin creation, please check customize format.",
        "tags": [
          "schemas"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "content": {
                    "type": "string",
                    "title": "Schema content inside content."
                  },
                  "file": {
                    "type": "string",
                    "title": "Schema content in a file"
                  },
                  "soFile": {
                    "type": "string",
                    "title": "Schema with static plugin"
                  }
                },
                "required": [
                  "name"
                ],
                "x-apifox-orders": [
                  "name",
                  "content",
                  "file",
                  "soFile"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121080031-run"
      },
      "get": {
        "summary": "Show schemas",
        "x-apifox-folder": "Ekuiper/schemas",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for displaying all schemas defined in the server.",
        "tags": [
          "schemas"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": [
                      "schema1",
                      "schema2"
                    ]
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121081412-run"
      }
    },
    "/api/ekuiper/schemas/protobuf/{name}": {
      "get": {
        "summary": "Describe a schema",
        "x-apifox-folder": "Ekuiper/schemas",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for print the detailed definition of a schema.",
        "tags": [
          "schemas"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name of the schema.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "content": {
                      "type": "string"
                    },
                    "file": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "type",
                    "name",
                    "content",
                    "file"
                  ],
                  "x-apifox-orders": [
                    "type",
                    "name",
                    "content",
                    "file"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "type": "protobuf",
                      "name": "schema1",
                      "content": "message Book {required string title = 1; required int32 price = 2;}",
                      "file": "ekuiper\\etc\\schemas\\protobuf\\schema1.proto"
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121081624-run"
      },
      "delete": {
        "summary": "Delete a schema",
        "x-apifox-folder": "Ekuiper/schemas",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for dropping the schema.",
        "tags": [
          "schemas"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121082085-run"
      },
      "put": {
        "summary": "Update a schema",
        "x-apifox-folder": "Ekuiper/schemas",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for updating the schema. The request body is the same as creating a schema.",
        "tags": [
          "schemas"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "file": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "file"
                ],
                "x-apifox-orders": [
                  "name",
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121084077-run"
      }
    },
    "/api/ekuiper/services": {
      "post": {
        "summary": "Register external services",
        "x-apifox-folder": "Ekuiper/services",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "This API accepts JSON content to create new external services.\n### parameter\n\n1. name: The unique name of the external service, which must be exactly the same as the json file of service definition in the zip file.\n2. file: URL of external service file. URL supports http, https and file modes. When using the file mode, the file must be on the machine where the eKuiper server is located. It must be a zip file, which contains the service description json file with the same name as the service and any other auxiliary files. The schema file must be in the schema folder.\n\n### Service file format\n\nA sample zip file of the source named sample.zip\n\n1. sample.json\n2. Schema directory: it contains one or more schema files used by the service. For example, sample.proto.\n\nAn example of a request for a file on an HTTP server:\n\n```json\n{\n  \"name\":\"random\",\n  \"file\":\"http://127.0.0.1/services/sample.zip\"\n}\n```\n\nAn example of a request for a file on the eKuiper server:\n\n```json\n{\n  \"name\":\"random\",\n  \"file\":\"file:///var/services/sample.zip\"\n}\n```\n\n### ",
        "tags": [
          "services"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "file": {
                    "type": "string",
                    "description": " a file on an HTTP server or a file on the eKuiper server."
                  }
                },
                "required": [
                  "name",
                  "file"
                ],
                "x-apifox-orders": [
                  "name",
                  "file"
                ]
              },
              "example": {
                "name": "random",
                "file": "http://127.0.0.1/services/sample.zip"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121094424-run"
      },
      "get": {
        "summary": "Display external services",
        "x-apifox-folder": "Ekuiper/services",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "This API is used to display all external services defined in the server.",
        "tags": [
          "services"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": [
                      "sample",
                      "sample2"
                    ]
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121094856-run"
      }
    },
    "/api/ekuiper/services/{name}": {
      "get": {
        "summary": "Describe external services",
        "x-apifox-folder": "Ekuiper/services",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "This API is used to print detailed definitions of external services.",
        "tags": [
          "services"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "the name of the external service.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121095616-run"
      },
      "delete": {
        "summary": "Delete external services",
        "x-apifox-folder": "Ekuiper/services",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "This API is used to delete external services, and all functions defined under the service will be deleted.",
        "tags": [
          "services"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121096344-run"
      },
      "put": {
        "summary": "Update external services",
        "x-apifox-folder": "Ekuiper/services",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "This API is used to update external services, and its parameters are the same as that of service registration.",
        "tags": [
          "services"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "file": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "file"
                ],
                "x-apifox-orders": [
                  "name",
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121097883-run"
      }
    },
    "/api/ekuiper/services/functions": {
      "get": {
        "summary": "Display all external functions",
        "x-apifox-folder": "Ekuiper/services",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Each service can contain multiple functions. This API is used to display the names of all external functions that can be used in SQL.",
        "tags": [
          "services"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": [
                      "func1",
                      "func2"
                    ]
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121098266-run"
      }
    },
    "/api/ekuiper/services/functions/{name}": {
      "get": {
        "summary": "Describe external functions",
        "x-apifox-folder": "Ekuiper/services",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "This API is used to display the name of the service that defines this external function.",
        "tags": [
          "services"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "serviceName": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "serviceName"
                  ],
                  "x-apifox-orders": [
                    "name",
                    "serviceName"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "name": "funcName",
                      "serviceName": "serviceName"
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121098479-run"
      }
    },
    "/api/ekuiper/streams": {
      "post": {
        "summary": "Create a stream",
        "x-apifox-folder": "Ekuiper/streams",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for creating a stream.\nThis API can run any stream sql statements, not only stream creation.",
        "tags": [
          "streams"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sql": {
                    "type": "string"
                  }
                },
                "required": [
                  "sql"
                ],
                "x-apifox-orders": [
                  "sql"
                ]
              },
              "example": {
                "sql": "create stream my_stream (id bigint, name string, score float) WITH ( datasource = \"topic/temperature\", FORMAT = \"json\", KEY = \"id\")"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121102062-run"
      },
      "get": {
        "summary": "Show streams",
        "x-apifox-folder": "Ekuiper/streams",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for displaying all of streams defined in the server.",
        "tags": [
          "streams"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "examples": {
                  "1": {
                    "summary": "异常示例",
                    "value": [
                      "mystream"
                    ]
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121102454-run"
      }
    },
    "/api/ekuiper/streams/{id}}": {
      "get": {
        "summary": "Describe a stream",
        "x-apifox-folder": "Ekuiper/streams",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for print the detailed definition of stream.",
        "tags": [
          "streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Name": {
                      "type": "string"
                    },
                    "StreamFields": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "Name": {
                            "type": "string"
                          },
                          "FieldType": {
                            "type": "object",
                            "properties": {
                              "Type": {
                                "type": "integer"
                              }
                            },
                            "required": [
                              "Type"
                            ],
                            "x-apifox-orders": [
                              "Type"
                            ]
                          }
                        },
                        "required": [
                          "Name",
                          "FieldType"
                        ],
                        "x-apifox-orders": [
                          "Name",
                          "FieldType"
                        ]
                      }
                    },
                    "Options": {
                      "type": "object",
                      "properties": {
                        "DATASOURCE": {
                          "type": "string"
                        },
                        "FORMAT": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "DATASOURCE",
                        "FORMAT"
                      ],
                      "x-apifox-orders": [
                        "DATASOURCE",
                        "FORMAT"
                      ]
                    }
                  },
                  "required": [
                    "Name",
                    "StreamFields",
                    "Options"
                  ],
                  "x-apifox-orders": [
                    "Name",
                    "StreamFields",
                    "Options"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "Name": "demo",
                      "StreamFields": [
                        {
                          "Name": "temperature",
                          "FieldType": {
                            "Type": 2
                          }
                        },
                        {
                          "Name": "ts",
                          "FieldType": {
                            "Type": 1
                          }
                        }
                      ],
                      "Options": {
                        "DATASOURCE": "demo",
                        "FORMAT": "JSON"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121103241-run"
      }
    },
    "/api/ekuiper/streams/{id}/schema": {
      "get": {
        "summary": "Get stream schema",
        "x-apifox-folder": "Ekuiper/streams",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used to get the stream schema. The schema is inferred from the physical and logical schema definitions.",
        "tags": [
          "streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "x-apifox-orders": [
                        "type"
                      ]
                    },
                    "name": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "x-apifox-orders": [
                        "type"
                      ]
                    },
                    "age": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "x-apifox-orders": [
                        "type"
                      ]
                    },
                    "hobbies": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "indoor": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string"
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "x-apifox-orders": [
                                    "type"
                                  ]
                                }
                              },
                              "required": [
                                "type",
                                "items"
                              ],
                              "x-apifox-orders": [
                                "type",
                                "items"
                              ]
                            },
                            "outdoor": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string"
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "x-apifox-orders": [
                                    "type"
                                  ]
                                }
                              },
                              "required": [
                                "type",
                                "items"
                              ],
                              "x-apifox-orders": [
                                "type",
                                "items"
                              ]
                            }
                          },
                          "required": [
                            "indoor",
                            "outdoor"
                          ],
                          "x-apifox-orders": [
                            "indoor",
                            "outdoor"
                          ]
                        }
                      },
                      "required": [
                        "type",
                        "properties"
                      ],
                      "x-apifox-orders": [
                        "type",
                        "properties"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "age",
                    "hobbies"
                  ],
                  "x-apifox-orders": [
                    "id",
                    "name",
                    "age",
                    "hobbies"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "id": {
                        "type": "bigint"
                      },
                      "name": {
                        "type": "string"
                      },
                      "age": {
                        "type": "bigint"
                      },
                      "hobbies": {
                        "type": "struct",
                        "properties": {
                          "indoor": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "outdoor": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121104415-run"
      }
    },
    "/api/ekuiper/streams/{id}": {
      "get": {
        "summary": "Update a stream",
        "x-apifox-folder": "Ekuiper/streams",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for update the stream definition.",
        "tags": [
          "streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id or name of the old stream.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sql": {
                    "type": "string"
                  }
                },
                "required": [
                  "sql"
                ],
                "x-apifox-orders": [
                  "sql"
                ]
              },
              "example": {
                "sql": "create stream my_stream (id bigint, name string, score float) WITH ( datasource = \"topic/temperature\", FORMAT = \"json\", KEY = \"id\")"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121104974-run"
      },
      "delete": {
        "summary": "Drop a stream",
        "x-apifox-folder": "Ekuiper/streams",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for drop the stream definition.",
        "tags": [
          "streams"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121105204-run"
      }
    },
    "/api/ekuiper/tables": {
      "post": {
        "summary": "Create a table",
        "x-apifox-folder": "Ekuiper/tables",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for creating a table.\nThis API can run any table sql statements, not only table creation.",
        "tags": [
          "tables"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sql": {
                    "type": "string"
                  }
                },
                "required": [
                  "sql"
                ],
                "x-apifox-orders": [
                  "sql"
                ]
              },
              "example": {
                "sql": "create table my_table (id bigint, name string, score float) WITH ( datasource = \"lookup.json\", FORMAT = \"json\", KEY = \"id\")"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121107564-run"
      },
      "get": {
        "summary": "Show tables",
        "x-apifox-folder": "Ekuiper/tables",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for displaying all of tables defined in the server.\nThis API accepts one parameter kind, the value could be `scan` or `lookup` to query each kind of tables. Other values are invalid, it will return all kinds of tables. ",
        "tags": [
          "tables"
        ],
        "parameters": [
          {
            "name": "kind",
            "in": "query",
            "description": "query all the lookup tables.",
            "required": false,
            "example": "lookup",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "examples": {
                  "1": {
                    "summary": "异常示例",
                    "value": [
                      "mytable"
                    ]
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121108127-run"
      }
    },
    "/api/ekuiper/tables/{id}}": {
      "get": {
        "summary": "Describe a table",
        "x-apifox-folder": "Ekuiper/tables",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for print the detailed definition of table.",
        "tags": [
          "tables"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Name": {
                      "type": "string"
                    },
                    "StreamFields": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "Name": {
                            "type": "string"
                          },
                          "FieldType": {
                            "type": "object",
                            "properties": {
                              "Type": {
                                "type": "integer"
                              }
                            },
                            "required": [
                              "Type"
                            ],
                            "x-apifox-orders": [
                              "Type"
                            ]
                          }
                        },
                        "required": [
                          "Name",
                          "FieldType"
                        ],
                        "x-apifox-orders": [
                          "Name",
                          "FieldType"
                        ]
                      }
                    },
                    "Options": {
                      "type": "object",
                      "properties": {
                        "DATASOURCE": {
                          "type": "string"
                        },
                        "FORMAT": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "DATASOURCE",
                        "FORMAT"
                      ],
                      "x-apifox-orders": [
                        "DATASOURCE",
                        "FORMAT"
                      ]
                    }
                  },
                  "required": [
                    "Name",
                    "StreamFields",
                    "Options"
                  ],
                  "x-apifox-orders": [
                    "Name",
                    "StreamFields",
                    "Options"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "Name": "demo",
                      "StreamFields": [
                        {
                          "Name": "temperature",
                          "FieldType": {
                            "Type": 2
                          }
                        },
                        {
                          "Name": "ts",
                          "FieldType": {
                            "Type": 1
                          }
                        }
                      ],
                      "Options": {
                        "DATASOURCE": "lookup.json",
                        "FORMAT": "JSON"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121109117-run"
      }
    },
    "/api/ekuiper/tables/{id}/schema": {
      "get": {
        "summary": "Get table schema",
        "x-apifox-folder": "Ekuiper/tables",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used to get the table schema. The schema is inferred from the physical and logical schema definitions.",
        "tags": [
          "tables"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121110544-run"
      }
    },
    "/api/ekuiper/tables/{id}": {
      "put": {
        "summary": "Update a table",
        "x-apifox-folder": "Ekuiper/tables",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for update the table definition.",
        "tags": [
          "tables"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id or name of the old table.",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sql": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "sql"
                  ],
                  "x-apifox-orders": [
                    "sql"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "sql": "create table my_table (id bigint, name string, score float) WITH ( datasource = \"topic/temperature\", FORMAT = \"json\", KEY = \"id\")"
                    }
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121112174-run"
      },
      "delete": {
        "summary": "Drop a table",
        "x-apifox-folder": "Ekuiper/tables",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for drop the table definition.",
        "tags": [
          "tables"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121112366-run"
      }
    },
    "/api/ekuiper/config/uploads": {
      "post": {
        "summary": "Upload a configuration file",
        "x-apifox-folder": "Ekuiper/uploads",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API supports to upload a local file, provide the text content of file or upload a http file link. The upload request will save the file into your `${dataPath}/uploads`. It will override the existed file of the same name. The response is the absolute path of the uploaded file which you can refer in other configurations.\n\n### Upload by a file\n\nThe API accepts a multipart file upload requests. Below is an example html file to upload file to `http://127.0.0.1:9081/config/uploads`. In the form data, the file input name must be `uploadFile`.\n\n```shell <!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Upload File</title>\n  </head>\n  <body>\n    <form\n      enctype=\"multipart/form-data\"\n      action=\"http://127.0.0.1:9081/config/uploads\"\n      method=\"post\"\n    >\n      <input type=\"file\" name=\"uploadFile\" />\n      <input type=\"submit\" value=\"upload\" />\n    </form>\n  </body>\n</html>\n```\n### Upload by content\n\nProvide the text content and file name to create a configuration file.\n\n\n```json \n{\n  \"name\": \"my.json\",\n  \"content\": \"{\\\"hello\\\":\\\"world\\\"}\"\n}\n```\n\n### Upload by HTTP file link\n```json \n{\n  \"name\": \"my.json\",\n  \"file\": \"http://127.0.0.1:80/my.json\"\n}\n```",
        "tags": [
          "uploads"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "title": "configuration file name"
                  },
                  "content": {
                    "type": "string",
                    "title": " text content"
                  },
                  "file": {
                    "type": "string",
                    "title": "HTTP file link",
                    "description": "Should put the file in HTTP Server in advance"
                  }
                },
                "required": [
                  "name",
                  "file"
                ],
                "x-apifox-orders": [
                  "name",
                  "content",
                  "file"
                ]
              },
              "example": {
                "name": "my.json",
                "content": "{\"hello\":\"world\"}"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121118567-run"
      },
      "get": {
        "summary": "Show uploaded file list",
        "x-apifox-folder": "Ekuiper/uploads",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for displaying all files in the `${dataPath}/uploads` path.",
        "tags": [
          "uploads"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": [
                      "/ekuiper/data/uploads/zk.gif",
                      "/ekuiper/data/uploads/abc.gif"
                    ]
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121118950-run"
      }
    },
    "/api/ekuiper/config/uploads/{fileName}": {
      "delete": {
        "summary": "Delete an uploaded file",
        "x-apifox-folder": "Ekuiper/uploads",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used for deleting a file in the `${dataPath}/uploads` path.",
        "tags": [
          "uploads"
        ],
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-121119036-run"
      }
    },
    "/api/ekuiper/rules/{id}/explain": {
      "get": {
        "summary": "Query Rule Plan",
        "x-apifox-folder": "Ekuiper/rules",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "The API is used to get the plan of the SQL.",
        "tags": [
          "rules"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "rule id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "info": {
                      "type": "string"
                    },
                    "id": {
                      "type": "integer"
                    },
                    "children": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    }
                  },
                  "required": [
                    "type",
                    "info",
                    "id",
                    "children"
                  ],
                  "x-apifox-orders": [
                    "type",
                    "info",
                    "id",
                    "children"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Success",
                    "value": {
                      "type": "ProjectPlan",
                      "info": "Fields:[ * ]",
                      "id": 0,
                      "children": [
                        1
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/ekuiper/metrics": {
      "get": {
        "summary": "Get Metrics information of the data stream processing",
        "x-apifox-folder": "Ekuiper/metrics",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Query the raw metrics information of the data stream processing, after the normal operation of the rules, you can see the metrics information in the api similar to kuiper_sink_records_in_total .",
        "tags": [
          "data processing metrics"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {}
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": "# HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.\n# TYPE go_gc_duration_seconds summary\ngo_gc_duration_seconds{quantile=\"0\"} 0.000185937\ngo_gc_duration_seconds{quantile=\"0.25\"} 0.000342795\ngo_gc_duration_seconds{quantile=\"0.5\"} 0.000369361\ngo_gc_duration_seconds{quantile=\"0.75\"} 0.000391542\ngo_gc_duration_seconds{quantile=\"1\"} 0.000391542\ngo_gc_duration_seconds_sum 0.001289635\ngo_gc_duration_seconds_count 4\n# HELP go_goroutines Number of goroutines that currently exist.\n# TYPE go_goroutines gauge\ngo_goroutines 15\n# HELP go_info Information about the Go environment.\n# TYPE go_info gauge\ngo_info{version=\"go1.20.2\"} 1\n# HELP go_memstats_alloc_bytes Number of bytes allocated and still in use.\n# TYPE go_memstats_alloc_bytes gauge\ngo_memstats_alloc_bytes 6.983208e+06\n# HELP go_memstats_alloc_bytes_total Total number of bytes allocated, even if freed.\n# TYPE go_memstats_alloc_bytes_total counter\ngo_memstats_alloc_bytes_total 1.1783664e+07\n# HELP go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table.\n# TYPE go_memstats_buck_hash_sys_bytes gauge\ngo_memstats_buck_hash_sys_bytes 1.451727e+06\n# HELP go_memstats_frees_total Total number of frees.\n# TYPE go_memstats_frees_total counter\ngo_memstats_frees_total 62815\n# HELP go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata.\n# TYPE go_memstats_gc_sys_bytes gauge\ngo_memstats_gc_sys_bytes 8.595544e+06\n# HELP go_memstats_heap_alloc_bytes Number of heap bytes allocated and still in use.\n# TYPE go_memstats_heap_alloc_bytes gauge\ngo_memstats_heap_alloc_bytes 6.983208e+06\n# HELP go_memstats_heap_idle_bytes Number of heap bytes waiting to be used.\n# TYPE go_memstats_heap_idle_bytes gauge\ngo_memstats_heap_idle_bytes 6.209536e+06\n# HELP go_memstats_heap_inuse_bytes Number of heap bytes that are in use.\n# TYPE go_memstats_heap_inuse_bytes gauge\ngo_memstats_heap_inuse_bytes 9.91232e+06\n# HELP go_memstats_heap_objects Number of allocated objects.\n# TYPE go_memstats_heap_objects gauge\ngo_memstats_heap_objects 38478\n# HELP go_memstats_heap_released_bytes Number of heap bytes released to OS.\n# TYPE go_memstats_heap_released_bytes gauge\ngo_memstats_heap_released_bytes 4.58752e+06\n# HELP go_memstats_heap_sys_bytes Number of heap bytes obtained from system.\n# TYPE go_memstats_heap_sys_bytes gauge\ngo_memstats_heap_sys_bytes 1.6121856e+07\n# HELP go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection.\n# TYPE go_memstats_last_gc_time_seconds gauge\ngo_memstats_last_gc_time_seconds 1.7001045398775318e+09\n# HELP go_memstats_lookups_total Total number of pointer lookups.\n# TYPE go_memstats_lookups_total counter\ngo_memstats_lookups_total 0\n# HELP go_memstats_mallocs_total Total number of mallocs.\n# TYPE go_memstats_mallocs_total counter\ngo_memstats_mallocs_total 101293\n# HELP go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures.\n# TYPE go_memstats_mcache_inuse_bytes gauge\ngo_memstats_mcache_inuse_bytes 4800\n# HELP go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system.\n# TYPE go_memstats_mcache_sys_bytes gauge\ngo_memstats_mcache_sys_bytes 15600\n# HELP go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures.\n# TYPE go_memstats_mspan_inuse_bytes gauge\ngo_memstats_mspan_inuse_bytes 177280\n# HELP go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system.\n# TYPE go_memstats_mspan_sys_bytes gauge\ngo_memstats_mspan_sys_bytes 179520\n# HELP go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place.\n# TYPE go_memstats_next_gc_bytes gauge\ngo_memstats_next_gc_bytes 1.4275312e+07\n# HELP go_memstats_other_sys_bytes Number of bytes used for other system allocations.\n# TYPE go_memstats_other_sys_bytes gauge\ngo_memstats_other_sys_bytes 895921\n# HELP go_memstats_stack_inuse_bytes Number of bytes in use by the stack allocator.\n# TYPE go_memstats_stack_inuse_bytes gauge\ngo_memstats_stack_inuse_bytes 655360\n# HELP go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator.\n# TYPE go_memstats_stack_sys_bytes gauge\ngo_memstats_stack_sys_bytes 655360\n# HELP go_memstats_sys_bytes Number of bytes obtained from system.\n# TYPE go_memstats_sys_bytes gauge\ngo_memstats_sys_bytes 2.7915528e+07\n# HELP go_threads Number of OS threads created.\n# TYPE go_threads gauge\ngo_threads 9\n# HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.\n# TYPE process_cpu_seconds_total counter\nprocess_cpu_seconds_total 0.38\n# HELP process_max_fds Maximum number of open file descriptors.\n# TYPE process_max_fds gauge\nprocess_max_fds 1.048576e+06\n# HELP process_open_fds Number of open file descriptors.\n# TYPE process_open_fds gauge\nprocess_open_fds 14\n# HELP process_resident_memory_bytes Resident memory size in bytes.\n# TYPE process_resident_memory_bytes gauge\nprocess_resident_memory_bytes 7.012352e+07\n# HELP process_start_time_seconds Start time of the process since unix epoch in seconds.\n# TYPE process_start_time_seconds gauge\nprocess_start_time_seconds 1.7001045391e+09\n# HELP process_virtual_memory_bytes Virtual memory size in bytes.\n# TYPE process_virtual_memory_bytes gauge\nprocess_virtual_memory_bytes 1.327280128e+09\n# HELP process_virtual_memory_max_bytes Maximum amount of virtual memory available in bytes.\n# TYPE process_virtual_memory_max_bytes gauge\nprocess_virtual_memory_max_bytes 1.8446744073709552e+19\n# HELP promhttp_metric_handler_requests_in_flight Current number of scrapes being served.\n# TYPE promhttp_metric_handler_requests_in_flight gauge\npromhttp_metric_handler_requests_in_flight 1\n# HELP promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code.\n# TYPE promhttp_metric_handler_requests_total counter\npromhttp_metric_handler_requests_total{code=\"200\"} 0\npromhttp_metric_handler_requests_total{code=\"500\"} 0\npromhttp_metric_handler_requests_total{code=\"503\"} 0"
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3198643/apis/api-120511756-run"
      }
    },
    "/api/ekuiper/ruletest": {
      "post": {
        "summary": "Create a Test Rule",
        "x-apifox-folder": "Ekuiper/Test Rule",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Create a trial run rule, wait for it to run. This API can check syntax, ensuring the creation of an executable trial run rule.After the rule is created successfully, the websocket endpoint starts. Users can listen to the websocket address http://locahost:10081/test/uuid to get the result output. Among them, the port and id are the above return values.",
        "tags": [
          "test rule"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The id of the test rule, required, used for subsequent test rule management. Ensure uniqueness, it cannot be repeated with other test rules, otherwise the original test rule will be overwritten. This id has no association with the id of ordinary rules."
                  },
                  "sql": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "The sql statement of the test rule, required, used to define the syntax of the test rule."
                  },
                  "mockSource": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "demo": {
                        "type": "object",
                        "properties": {
                          "data": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "a": {
                                  "type": "integer"
                                },
                                "b": {
                                  "type": "integer"
                                }
                              },
                              "x-apifox-orders": [
                                "a",
                                "b"
                              ]
                            }
                          },
                          "interval": {
                            "type": "integer"
                          },
                          "loop": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "data",
                          "interval",
                          "loop"
                        ],
                        "x-apifox-orders": [
                          "data",
                          "interval",
                          "loop"
                        ]
                      },
                      "demo1": {
                        "type": "object",
                        "properties": {
                          "data": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "n": {
                                  "type": "integer"
                                }
                              },
                              "required": [
                                "n"
                              ],
                              "x-apifox-orders": [
                                "n"
                              ]
                            }
                          },
                          "interval": {
                            "type": "integer"
                          },
                          "loop": {
                            "type": "boolean"
                          }
                        },
                        "required": [
                          "data",
                          "interval",
                          "loop"
                        ],
                        "x-apifox-orders": [
                          "data",
                          "interval",
                          "loop"
                        ]
                      }
                    },
                    "required": [
                      "demo",
                      "demo1"
                    ],
                    "x-apifox-orders": [
                      "demo",
                      "demo1"
                    ],
                    "description": "The mock rule definition of the data source of the test rule, optional, used to define the input data of the test rule. If not defined, the real data source in SQL will be used."
                  },
                  "sinkProps": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "dataTemplate": {
                        "type": "string"
                      },
                      "fields": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "dataTemplate",
                      "fields"
                    ],
                    "x-apifox-orders": [
                      "dataTemplate",
                      "fields"
                    ],
                    "description": "The definition of the sink parameters of the test rule, optional. Most of the common parameters of the sink can be used, such as dataTemplate and fields. If not defined, the default sink parameters will be used."
                  }
                },
                "required": [
                  "id",
                  "sql",
                  "mockSource",
                  "sinkProps"
                ],
                "x-apifox-orders": [
                  "id",
                  "sql",
                  "mockSource",
                  "sinkProps"
                ]
              },
              "example": {
                "id": "uuid",
                "sql": "select * from demo",
                "mockSource": {
                  "demo": {
                    "data": [
                      {
                        "a": 2
                      },
                      {
                        "b": 3
                      }
                    ],
                    "interval": 100,
                    "loop": true
                  },
                  "demo1": {
                    "data": [
                      {
                        "n": 2
                      },
                      {
                        "n": 3
                      }
                    ],
                    "interval": 200,
                    "loop": true
                  }
                },
                "sinkProps": {
                  "dataTemplate": "xxx",
                  "fields": [
                    "abc",
                    "test"
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "port": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "id",
                    "port"
                  ],
                  "x-apifox-orders": [
                    "id",
                    "port"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Success",
                    "value": {
                      "id": "uuid",
                      "port": 10081
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "msg": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "msg"
                  ],
                  "x-apifox-orders": [
                    "msg"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Exception",
                    "value": {
                      "msg": "error message here"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/ekuiper/ruletest/{id}/start": {
      "post": {
        "summary": "Start the Test Rule",
        "x-apifox-folder": "Ekuiper/Test Rule",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Start the trial run rule, WebSocket will be able to receive the data output after the rule runs.",
        "tags": [
          "test rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {}
                },
                "examples": {
                  "1": {
                    "summary": "Success",
                    "value": "Test rule uuid was started"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/ekuiper/ruletest/{id}": {
      "delete": {
        "summary": "Delete the Test Rule",
        "x-apifox-folder": "Ekuiper/Test Rule",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Delete the trial run rule, WebSocket will stop the service.",
        "tags": [
          "test rule"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {}
                },
                "examples": {
                  "1": {
                    "summary": "Success",
                    "value": "Test rule uuid was stopped"
                  }
                }
              }
            }
          }
        },
        "x-run-in-apifox": "https://apifox.com/web/project/3516282/apis/api-133383197-run"
      }
    },
    "/api/ekuiper/udf/javascript": {
      "post": {
        "summary": "Create a UDF",
        "x-apifox-folder": "Ekuiper/udf",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Besides defining function in plugins, user-defined functions (UDF) are also supported independently. Currently, we only support JavaScript UDF. We can use REST API or CLI to manage JavaScript functions. \n\nUse this endpoint to create a new function.",
        "tags": [
          "udf"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": " A unique name for the function. This name must also be defined as a function in the script field."
                  },
                  "description": {
                    "type": "string",
                    "description": "A brief description of the function."
                  },
                  "script": {
                    "type": "string",
                    "description": "The function implementation in JavaScript."
                  },
                  "isAgg": {
                    "type": "boolean",
                    "description": "A boolean indicating whether the function is an aggregate function."
                  }
                },
                "required": [
                  "id",
                  "description",
                  "script",
                  "isAgg"
                ],
                "x-apifox-orders": [
                  "id",
                  "description",
                  "script",
                  "isAgg"
                ],
                "x-apifox-ignore-properties": []
              },
              "example": {
                "id": "area",
                "description": "calculate area",
                "script": "function area(x, y) { return x * y; }",
                "isAgg": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apifox-orders": []
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List UDFs",
        "x-apifox-folder": "Ekuiper/udf",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Use this endpoint to display all JavaScript functions defined in the server.The response will be a list of function names. ",
        "tags": [
          "udf"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": [
                      "area"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/ekuiper/udf/javascript/{id}": {
      "get": {
        "summary": "Describe a UDF",
        "x-apifox-folder": "Ekuiper/udf",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Use this endpoint to get the detailed definition of a function.Replace {id} with the name of the function you want to describe. The response will be a JSON object with the function's details.",
        "tags": [
          "udf"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "script": {
                      "type": "string"
                    },
                    "isAgg": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "id",
                    "description",
                    "script",
                    "isAgg"
                  ],
                  "x-apifox-orders": [
                    "id",
                    "description",
                    "script",
                    "isAgg"
                  ],
                  "x-apifox-ignore-properties": []
                },
                "examples": {
                  "1": {
                    "summary": "success",
                    "value": {
                      "id": "area",
                      "description": "calculate area",
                      "script": "function area(x, y) { return x * y; }",
                      "isAgg": false
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a UDF",
        "x-apifox-folder": "Ekuiper/udf",
        "x-apifox-status": "released",
        "deprecated": false,
        "description": "Use this endpoint to delete a function.Replace {id} with the name of the function you want to delete. Note that you need to manually stop or delete any rules using the UDF before deleting it. A running rule will not be affected by the deletion of a UDF.",
        "tags": [
          "udf"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apifox-orders": []
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a UDF",
        "x-apifox-folder": "Ekuiper/udf",
        "x-apifox-status": "developing",
        "deprecated": false,
        "description": "The JavaScript UDF can be updated and hot reload. Notice that, a running rule must be restarted to load the updated function.Replace {id} with the name of the function you want to update. The request body should be the same as when creating a UDF. If the function of the id does not exist, it will be created. Otherwise, it will be updated.",
        "tags": [
          "udf"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "x-apifox-orders": []
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {}
  },
  "servers": []
}